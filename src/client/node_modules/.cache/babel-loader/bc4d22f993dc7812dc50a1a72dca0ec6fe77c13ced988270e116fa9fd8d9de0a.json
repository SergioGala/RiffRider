{"ast":null,"code":"let votingQueue = [];\nexport const getVotingQueue = async () => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve([...votingQueue]);\n    }, 500);\n  });\n};\nexport const submitVote = async (userId, songId, voteType) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const songIndex = votingQueue.findIndex(song => song.id === songId);\n      if (songIndex === -1) {\n        reject(new Error('Canción no encontrada'));\n        return;\n      }\n      if (votingQueue[songIndex].userVoted && votingQueue[songIndex].userVoted[userId]) {\n        reject(new Error('Ya has votado por esta canción'));\n        return;\n      }\n      const voteChange = voteType === 'upvote' ? 1 : -1;\n      votingQueue[songIndex] = {\n        ...votingQueue[songIndex],\n        votes: (votingQueue[songIndex].votes || 0) + voteChange,\n        trend: voteChange,\n        userVoted: {\n          ...votingQueue[songIndex].userVoted,\n          [userId]: true\n        }\n      };\n      resolve({\n        success: true,\n        updatedSong: votingQueue[songIndex]\n      });\n    }, 500);\n  });\n};\nexport const addToVotingQueue = async song => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      const existingSong = votingQueue.find(s => s.id === song.id);\n      if (!existingSong) {\n        const newSong = {\n          id: song.id,\n          songTitle: song.songTitle || song.name,\n          artistName: song.artistName || song.artists,\n          album: song.album,\n          album_image: song.album_image,\n          votes: 0,\n          trend: 0,\n          userVoted: {}\n        };\n        votingQueue.push(newSong);\n        resolve({\n          success: true,\n          addedSong: newSong\n        });\n      } else {\n        resolve({\n          success: false,\n          message: 'La canción ya está en la cola de votación'\n        });\n      }\n    }, 500);\n  });\n};","map":{"version":3,"names":["votingQueue","getVotingQueue","Promise","resolve","setTimeout","submitVote","userId","songId","voteType","reject","songIndex","findIndex","song","id","Error","userVoted","voteChange","votes","trend","success","updatedSong","addToVotingQueue","existingSong","find","s","newSong","songTitle","name","artistName","artists","album","album_image","push","addedSong","message"],"sources":["C:/Users/Sergio/Desktop/RiffRider/src/client/src/services/VotingService.js"],"sourcesContent":["let votingQueue = [];\r\n\r\nexport const getVotingQueue = async () => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve([...votingQueue]);\r\n    }, 500);\r\n  });\r\n};\r\n\r\nexport const submitVote = async (userId, songId, voteType) => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const songIndex = votingQueue.findIndex(song => song.id === songId);\r\n      if (songIndex === -1) {\r\n        reject(new Error('Canción no encontrada'));\r\n        return;\r\n      }\r\n\r\n      if (votingQueue[songIndex].userVoted && votingQueue[songIndex].userVoted[userId]) {\r\n        reject(new Error('Ya has votado por esta canción'));\r\n        return;\r\n      }\r\n\r\n      const voteChange = voteType === 'upvote' ? 1 : -1;\r\n      votingQueue[songIndex] = {\r\n        ...votingQueue[songIndex],\r\n        votes: (votingQueue[songIndex].votes || 0) + voteChange,\r\n        trend: voteChange,\r\n        userVoted: { ...votingQueue[songIndex].userVoted, [userId]: true }\r\n      };\r\n\r\n      resolve({ success: true, updatedSong: votingQueue[songIndex] });\r\n    }, 500);\r\n  });\r\n};\r\n\r\nexport const addToVotingQueue = async (song) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      const existingSong = votingQueue.find(s => s.id === song.id);\r\n      if (!existingSong) {\r\n        const newSong = {\r\n          id: song.id,\r\n          songTitle: song.songTitle || song.name,\r\n          artistName: song.artistName || song.artists,\r\n          album: song.album,\r\n          album_image: song.album_image,\r\n          votes: 0,\r\n          trend: 0,\r\n          userVoted: {}\r\n        };\r\n        votingQueue.push(newSong);\r\n        resolve({ success: true, addedSong: newSong });\r\n      } else {\r\n        resolve({ success: false, message: 'La canción ya está en la cola de votación' });\r\n      }\r\n    }, 500);\r\n  });\r\n};"],"mappings":"AAAA,IAAIA,WAAW,GAAG,EAAE;AAEpB,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;IAC9BC,UAAU,CAAC,MAAM;MACfD,OAAO,CAAC,CAAC,GAAGH,WAAW,CAAC,CAAC;IAC3B,CAAC,EAAE,GAAG,CAAC;EACT,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMK,UAAU,GAAG,MAAAA,CAAOC,MAAM,EAAEC,MAAM,EAAEC,QAAQ,KAAK;EAC5D,OAAO,IAAIN,OAAO,CAAC,CAACC,OAAO,EAAEM,MAAM,KAAK;IACtCL,UAAU,CAAC,MAAM;MACf,MAAMM,SAAS,GAAGV,WAAW,CAACW,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKN,MAAM,CAAC;MACnE,IAAIG,SAAS,KAAK,CAAC,CAAC,EAAE;QACpBD,MAAM,CAAC,IAAIK,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAC1C;MACF;MAEA,IAAId,WAAW,CAACU,SAAS,CAAC,CAACK,SAAS,IAAIf,WAAW,CAACU,SAAS,CAAC,CAACK,SAAS,CAACT,MAAM,CAAC,EAAE;QAChFG,MAAM,CAAC,IAAIK,KAAK,CAAC,gCAAgC,CAAC,CAAC;QACnD;MACF;MAEA,MAAME,UAAU,GAAGR,QAAQ,KAAK,QAAQ,GAAG,CAAC,GAAG,CAAC,CAAC;MACjDR,WAAW,CAACU,SAAS,CAAC,GAAG;QACvB,GAAGV,WAAW,CAACU,SAAS,CAAC;QACzBO,KAAK,EAAE,CAACjB,WAAW,CAACU,SAAS,CAAC,CAACO,KAAK,IAAI,CAAC,IAAID,UAAU;QACvDE,KAAK,EAAEF,UAAU;QACjBD,SAAS,EAAE;UAAE,GAAGf,WAAW,CAACU,SAAS,CAAC,CAACK,SAAS;UAAE,CAACT,MAAM,GAAG;QAAK;MACnE,CAAC;MAEDH,OAAO,CAAC;QAAEgB,OAAO,EAAE,IAAI;QAAEC,WAAW,EAAEpB,WAAW,CAACU,SAAS;MAAE,CAAC,CAAC;IACjE,CAAC,EAAE,GAAG,CAAC;EACT,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMW,gBAAgB,GAAG,MAAOT,IAAI,IAAK;EAC9C,OAAO,IAAIV,OAAO,CAAEC,OAAO,IAAK;IAC9BC,UAAU,CAAC,MAAM;MACf,MAAMkB,YAAY,GAAGtB,WAAW,CAACuB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACX,EAAE,KAAKD,IAAI,CAACC,EAAE,CAAC;MAC5D,IAAI,CAACS,YAAY,EAAE;QACjB,MAAMG,OAAO,GAAG;UACdZ,EAAE,EAAED,IAAI,CAACC,EAAE;UACXa,SAAS,EAAEd,IAAI,CAACc,SAAS,IAAId,IAAI,CAACe,IAAI;UACtCC,UAAU,EAAEhB,IAAI,CAACgB,UAAU,IAAIhB,IAAI,CAACiB,OAAO;UAC3CC,KAAK,EAAElB,IAAI,CAACkB,KAAK;UACjBC,WAAW,EAAEnB,IAAI,CAACmB,WAAW;UAC7Bd,KAAK,EAAE,CAAC;UACRC,KAAK,EAAE,CAAC;UACRH,SAAS,EAAE,CAAC;QACd,CAAC;QACDf,WAAW,CAACgC,IAAI,CAACP,OAAO,CAAC;QACzBtB,OAAO,CAAC;UAAEgB,OAAO,EAAE,IAAI;UAAEc,SAAS,EAAER;QAAQ,CAAC,CAAC;MAChD,CAAC,MAAM;QACLtB,OAAO,CAAC;UAAEgB,OAAO,EAAE,KAAK;UAAEe,OAAO,EAAE;QAA4C,CAAC,CAAC;MACnF;IACF,CAAC,EAAE,GAAG,CAAC;EACT,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}