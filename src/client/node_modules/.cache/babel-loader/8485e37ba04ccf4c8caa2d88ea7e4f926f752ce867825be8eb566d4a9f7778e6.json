{"ast":null,"code":"/**\r\n * @license lucide-react v0.439.0 - ISC\r\n *\r\n * This source code is licensed under the ISC license.\r\n * See the LICENSE file in the root directory of this source tree.\r\n */\n\nconst toKebabCase = string => string.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase();\nconst mergeClasses = (...classes) => classes.filter((className, index, array) => {\n  return Boolean(className) && array.indexOf(className) === index;\n}).join(\" \");\nexport { mergeClasses, toKebabCase };","map":{"version":3,"names":["toKebabCase","string","replace","toLowerCase","mergeClasses","classes","filter","className","index","array","Boolean","indexOf","join"],"sources":["C:\\Users\\Sergio\\Desktop\\RiffRider\\node_modules\\shared\\src\\utils.ts"],"sourcesContent":["import { CamelToPascal } from './utility-types';\n\n/**\n * Converts string to kebab case\n *\n * @param {string} string\n * @returns {string} A kebabized string\n */\nexport const toKebabCase = (string: string) =>\n  string.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();\n\n/**\n * Converts string to pascal case\n *\n * @param {string} string\n * @returns {string} A pascalized string\n */\nexport const toPascalCase = <T extends string>(string: T): CamelToPascal<T> => {\n  const camelCase = string.replace(/^([A-Z])|[\\s-_]+(\\w)/g, (match, p1, p2) =>\n    p2 ? p2.toUpperCase() : p1.toLowerCase(),\n  );\n\n  return (camelCase.charAt(0).toUpperCase() + camelCase.slice(1)) as CamelToPascal<T>;\n};\n\n/**\n * Merges classes into a single string\n *\n * @param {array} classes\n * @returns {string} A string of classes\n */\nexport const mergeClasses = <ClassType = string | undefined | null>(...classes: ClassType[]) =>\n  classes\n    .filter((className, index, array) => {\n      return Boolean(className) && array.indexOf(className) === index;\n    })\n    .join(' ');\n"],"mappings":";;;;;;;AAQa,MAAAA,WAAA,GAAeC,MAC1B,IAAAA,MAAA,CAAOC,OAAA,CAAQ,oBAAsB,SAAO,EAAEC,WAAY;AAsB/C,MAAAC,YAAA,GAAeA,CAAA,GAA2CC,OACrE,KAAAA,OAAA,CACGC,MAAA,CAAO,CAACC,SAAA,EAAWC,KAAA,EAAOC,KAAU;EACnC,OAAOC,OAAA,CAAQH,SAAS,KAAKE,KAAM,CAAAE,OAAA,CAAQJ,SAAS,CAAM,KAAAC,KAAA;AAC5D,CAAC,EACAI,IAAA,CAAK,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}