{"ast":null,"code":"var _jsxFileName = \"/workspaces/RiffRider/src/client/src/components/TechnoLines.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TechnoLines = () => {\n  _s();\n  const [lines, setLines] = useState([]);\n  const [beat, setBeat] = useState(0);\n  const createLine = useCallback(() => ({\n    left: `${Math.random() * 100}%`,\n    width: `${Math.random() * 3 + 1}px`,\n    height: `${Math.random() * 30 + 10}%`,\n    animationDuration: `${Math.random() * 3 + 5}s`,\n    animationDelay: `${Math.random() * 2}s`,\n    opacity: Math.random() * 0.5 + 0.5\n  }), []);\n  useEffect(() => {\n    const createLines = () => {\n      const newLines = Array(15).fill().map(createLine);\n      setLines(newLines);\n    };\n    createLines();\n    const lineInterval = setInterval(createLines, 8000);\n\n    // Simular un beat\n    const beatInterval = setInterval(() => {\n      setBeat(prevBeat => (prevBeat + 1) % 4);\n    }, 500); // 120 BPM\n\n    return () => {\n      clearInterval(lineInterval);\n      clearInterval(beatInterval);\n    };\n  }, [createLine]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"techno-lines\",\n    children: lines.map((line, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `techno-line ${beat === 0 ? 'pulse' : ''}`,\n      style: {\n        left: line.left,\n        width: line.width,\n        height: line.height,\n        animationDuration: line.animationDuration,\n        animationDelay: line.animationDelay,\n        opacity: line.opacity,\n        transform: `scaleY(${1 + beat * 0.1})`\n      }\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(TechnoLines, \"2S7mjKPg1krDfn4PD/4tuSK35Nk=\");\n_c = TechnoLines;\nexport default TechnoLines;\nvar _c;\n$RefreshReg$(_c, \"TechnoLines\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","jsxDEV","_jsxDEV","TechnoLines","_s","lines","setLines","beat","setBeat","createLine","left","Math","random","width","height","animationDuration","animationDelay","opacity","createLines","newLines","Array","fill","map","lineInterval","setInterval","beatInterval","prevBeat","clearInterval","className","children","line","index","style","transform","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/workspaces/RiffRider/src/client/src/components/TechnoLines.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\n\nconst TechnoLines = () => {\n  const [lines, setLines] = useState([]);\n  const [beat, setBeat] = useState(0);\n\n  const createLine = useCallback(() => ({\n    left: `${Math.random() * 100}%`,\n    width: `${Math.random() * 3 + 1}px`,\n    height: `${Math.random() * 30 + 10}%`,\n    animationDuration: `${Math.random() * 3 + 5}s`,\n    animationDelay: `${Math.random() * 2}s`,\n    opacity: Math.random() * 0.5 + 0.5\n  }), []);\n\n  useEffect(() => {\n    const createLines = () => {\n      const newLines = Array(15).fill().map(createLine);\n      setLines(newLines);\n    };\n\n    createLines();\n    const lineInterval = setInterval(createLines, 8000);\n\n    // Simular un beat\n    const beatInterval = setInterval(() => {\n      setBeat((prevBeat) => (prevBeat + 1) % 4);\n    }, 500); // 120 BPM\n\n    return () => {\n      clearInterval(lineInterval);\n      clearInterval(beatInterval);\n    };\n  }, [createLine]);\n\n  return (\n    <div className=\"techno-lines\">\n      {lines.map((line, index) => (\n        <div\n          key={index}\n          className={`techno-line ${beat === 0 ? 'pulse' : ''}`}\n          style={{\n            left: line.left,\n            width: line.width,\n            height: line.height,\n            animationDuration: line.animationDuration,\n            animationDelay: line.animationDelay,\n            opacity: line.opacity,\n            transform: `scaleY(${1 + beat * 0.1})`\n          }}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default TechnoLines;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhE,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EAEnC,MAAMU,UAAU,GAAGT,WAAW,CAAC,OAAO;IACpCU,IAAI,EAAE,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG;IAC/BC,KAAK,EAAE,GAAGF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI;IACnCE,MAAM,EAAE,GAAGH,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG;IACrCG,iBAAiB,EAAE,GAAGJ,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG;IAC9CI,cAAc,EAAE,GAAGL,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG;IACvCK,OAAO,EAAEN,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG;EACjC,CAAC,CAAC,EAAE,EAAE,CAAC;EAEPd,SAAS,CAAC,MAAM;IACd,MAAMoB,WAAW,GAAGA,CAAA,KAAM;MACxB,MAAMC,QAAQ,GAAGC,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC,CAACC,GAAG,CAACb,UAAU,CAAC;MACjDH,QAAQ,CAACa,QAAQ,CAAC;IACpB,CAAC;IAEDD,WAAW,CAAC,CAAC;IACb,MAAMK,YAAY,GAAGC,WAAW,CAACN,WAAW,EAAE,IAAI,CAAC;;IAEnD;IACA,MAAMO,YAAY,GAAGD,WAAW,CAAC,MAAM;MACrChB,OAAO,CAAEkB,QAAQ,IAAK,CAACA,QAAQ,GAAG,CAAC,IAAI,CAAC,CAAC;IAC3C,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;;IAET,OAAO,MAAM;MACXC,aAAa,CAACJ,YAAY,CAAC;MAC3BI,aAAa,CAACF,YAAY,CAAC;IAC7B,CAAC;EACH,CAAC,EAAE,CAAChB,UAAU,CAAC,CAAC;EAEhB,oBACEP,OAAA;IAAK0B,SAAS,EAAC,cAAc;IAAAC,QAAA,EAC1BxB,KAAK,CAACiB,GAAG,CAAC,CAACQ,IAAI,EAAEC,KAAK,kBACrB7B,OAAA;MAEE0B,SAAS,EAAE,eAAerB,IAAI,KAAK,CAAC,GAAG,OAAO,GAAG,EAAE,EAAG;MACtDyB,KAAK,EAAE;QACLtB,IAAI,EAAEoB,IAAI,CAACpB,IAAI;QACfG,KAAK,EAAEiB,IAAI,CAACjB,KAAK;QACjBC,MAAM,EAAEgB,IAAI,CAAChB,MAAM;QACnBC,iBAAiB,EAAEe,IAAI,CAACf,iBAAiB;QACzCC,cAAc,EAAEc,IAAI,CAACd,cAAc;QACnCC,OAAO,EAAEa,IAAI,CAACb,OAAO;QACrBgB,SAAS,EAAE,UAAU,CAAC,GAAG1B,IAAI,GAAG,GAAG;MACrC;IAAE,GAVGwB,KAAK;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAWX,CACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACjC,EAAA,CApDID,WAAW;AAAAmC,EAAA,GAAXnC,WAAW;AAsDjB,eAAeA,WAAW;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}