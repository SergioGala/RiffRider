import React, { useState, useEffect, useCallback } from 'react';
import { motion } from 'framer-motion';
import SearchBar from './components/SearchBar';
import SongList from './components/SongList';
import Pagination from './components/Pagination';
import Sorting from './components/Sorting';
import LoadingIndicator from './components/LoadingIndicator';
import TechnoLines from './components/TechnoLines';
import PartyMode from './components/PartyMode';
import GlitchText from './components/GlitchText';
import SuggestionQueue from './components/SuggestionQueue';
import DjInterface from './components/DjInterface';
import AudioPlayer from './components/AudioPlayer';
import AudioVisualizer from './components/AudioVisualizer';
import InternetConnectionCheck from './components/InternetConnectionCheck';
import ThemeCarousel from './components/ThemeCarousel';
import DynamicTheme from './components/DynamicTheme';
import Register from './components/Register';
import Login from './components/Login';
import { submitSongRequest, getRequestQueue } from './services/SongRequestService';
import { authorizeSpotify, setAccessToken, searchTracks } from './services/SpotifyService';
import { themes } from './components/themes';
import './App.css';
import './animations.css';

function App() {
  const [searchTerm, setSearchTerm] = useState('');
  const [songs, setSongs] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [songsPerPage] = useState(10);
  const [sortCriteria, setSortCriteria] = useState('name');
  const [sortOrder, setSortOrder] = useState('asc');
  const [isLoading, setIsLoading] = useState(false);
  const [isPartyMode, setIsPartyMode] = useState(false);
  const [userId, setUserId] = useState(null);
  const [requestQueue, setRequestQueue] = useState([]);
  const [isDjMode, setIsDjMode] = useState(false);
  const [currentSong, setCurrentSong] = useState(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [spotifyToken, setSpotifyToken] = useState(null);
  const [currentTheme, setCurrentTheme] = useState({
    name: 'pop',
    mode: 'light',
    ...themes.pop.light
  });
  const [isDynamicThemeEnabled, setIsDynamicThemeEnabled] = useState(false);
  const [currentAlbumCover, setCurrentAlbumCover] = useState(null);
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [showRegister, setShowRegister] = useState(false);
  const [showAuthForms, setShowAuthForms] = useState(false);

  useEffect(() => {
    const hash = window.location.hash
      .substring(1)
      .split('&')
      .reduce((initial, item) => {
        if (item) {
          var parts = item.split('=');
          initial[parts[0]] = decodeURIComponent(parts[1]);
        }
        return initial;
      }, {});

    if (hash.access_token) {
      setSpotifyToken(hash.access_token);
      setAccessToken(hash.access_token);
      window.location.hash = '';
    }

    const fetchRequestQueue = async () => {
      const queue = await getRequestQueue();
      setRequestQueue(queue);
    };

    fetchRequestQueue();
    const queueInterval = setInterval(fetchRequestQueue, 30000);

    return () => clearInterval(queueInterval);
  }, []);

  useEffect(() => {
    if (currentTheme && currentTheme.name && themes[currentTheme.name]) {
      const themeData = themes[currentTheme.name][currentTheme.mode];
      if (themeData) {
        Object.keys(themeData).forEach(key => {
          document.documentElement.style.setProperty(`--${key}`, themeData[key]);
        });
  
        // Aplicar fondo y patrón
        document.body.style.backgroundColor = themeData.background || '';
        document.body.style.backgroundImage = themeData.pattern || 'none';
        
        document.body.classList.add('theme-transition');
        setTimeout(() => {
          document.body.classList.remove('theme-transition');
        }, 300);
  
        // Aplicar animación
        const oldStyle = document.getElementById('theme-animations');
        if (oldStyle) {
          oldStyle.remove();
        }
  
        if (themeData.animation && themeData.animation.name) {
          const style = document.createElement('style');
          style.id = 'theme-animations';
          style.textContent = `
            ${themeData.animation.keyframes}
            .animated-element {
              animation: ${themeData.animation.name} 2s infinite;
            }
          `;
          document.head.appendChild(style);
        }
  
        // Notificar cambio de tema
        window.dispatchEvent(new CustomEvent('themechange', { detail: { theme: currentTheme.name } }));
      }
    }
  
    // Limpieza
    return () => {
      const styleToRemove = document.getElementById('theme-animations');
      if (styleToRemove) {
        styleToRemove.remove();
      }
    };
  }, [currentTheme]);

  const handleSearch = useCallback(async (term) => {
    setSearchTerm(term);
    if (!term.trim()) {
      setSongs([]);
      setIsLoading(false);
      return;
    }
    if (spotifyToken) {
      setIsLoading(true);
      try {
        const results = await searchTracks(term);
        if (Array.isArray(results) && results.length > 0) {
          setSongs(results);
          setCurrentPage(1);
        } else {
          setSongs([]);
        }
      } catch (error) {
        console.error('Error in handleSearch:', error);
        setSongs([]);
      } finally {
        setIsLoading(false);
      }
    } else {
      console.error('No Spotify token available. Please authenticate first.');
    }
  }, [spotifyToken]);

  const sortSongs = useCallback((songsToSort, criteria, order) => {
    return [...songsToSort].sort((a, b) => {
      let valueA = a[criteria]?.toLowerCase();
      let valueB = b[criteria]?.toLowerCase();
      return order === 'asc' 
        ? valueA.localeCompare(valueB)
        : valueB.localeCompare(valueA);
    });
  }, []);

  const sortedSongs = useCallback(() => {
    return sortSongs(songs, sortCriteria, sortOrder);
  }, [songs, sortCriteria, sortOrder, sortSongs]);

  const getCurrentSongs = useCallback(() => {
    const indexOfLastSong = currentPage * songsPerPage;
    const indexOfFirstSong = indexOfLastSong - songsPerPage;
    return sortedSongs().slice(indexOfFirstSong, indexOfLastSong);
  }, [currentPage, songsPerPage, sortedSongs]);

  const totalPages = Math.ceil(sortedSongs().length / songsPerPage);

  const handlePageChange = useCallback((pageNumber) => {
    setCurrentPage(pageNumber);
  }, []);

  const handleSuggestSong = useCallback(async (song) => {
    try {
      const request = {
        songTitle: song.name,
        artistName: song.artists,
        album: song.album,
        album_image: song.album_image
      };
      await submitSongRequest(request, userId);
      const updatedQueue = await getRequestQueue();
      setRequestQueue(updatedQueue);
    } catch (error) {
      console.error('Error suggesting song:', error);
    }
  }, [userId]);

  const playSong = useCallback((song) => {
    setCurrentSong(song);
    setIsPlaying(true);
    setCurrentAlbumCover(song.album_image);
  }, []);

  const closeAudioPlayer = useCallback(() => {
    setCurrentSong(null);
    setIsPlaying(false);
  }, []);

  const handleLogin = useCallback((userData) => {
    setIsLoggedIn(true);
    setUserId(userData.id);
    setShowAuthForms(false);
  }, []);

  const handleLogout = useCallback(() => {
    setIsLoggedIn(false);
    setUserId(null);
  }, []);

  const handleBackToApp = useCallback(() => {
    setShowAuthForms(false);
  }, []);

  return (
    <motion.div 
      className="App fade-in"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
      style={{
        fontFamily: currentTheme.font,
        color: currentTheme.text
      }}
    >
      <InternetConnectionCheck />
      <TechnoLines />
      <PartyMode isActive={isPartyMode} />
      
      <header className="app-header animated-element">
        <GlitchText text="🎧 YouDJ" />
      </header>

      <nav className="app-nav">
        {!isLoggedIn && (
          <>
            <button className="animated-element" onClick={() => { setShowRegister(false); setShowAuthForms(true); }}>Iniciar Sesión</button>
            <button className="animated-element" onClick={() => { setShowRegister(true); setShowAuthForms(true); }}>Registrarse</button>
          </>
        )}
        {!spotifyToken && (
          <button onClick={authorizeSpotify} className="spotify-auth-button animated-element">
            Conectar con Spotify
          </button>
        )}
        {isLoggedIn && (
          <>
            <button onClick={() => setIsPartyMode(!isPartyMode)} className="party-mode-toggle animated-element">
              {isPartyMode ? 'Desactivar' : 'Activar'} Modo Fiesta
            </button>
            <button onClick={() => setIsDjMode(!isDjMode)} className="dj-mode-toggle animated-element">
              {isDjMode ? 'Modo Usuario' : 'Modo DJ'}
            </button>
            <button onClick={handleLogout} className="animated-element">Cerrar Sesión</button>
          </>
        )}
      </nav>

      <main className="app-main">
        {showAuthForms ? (
          showRegister ? (
            <Register onRegisterSuccess={handleLogin} onBackToApp={handleBackToApp} />
          ) : (
            <Login onLoginSuccess={handleLogin} onBackToApp={handleBackToApp} />
          )
        ) : (
          <>
            {spotifyToken && !isDjMode && (
              <SearchBar searchTerm={searchTerm} setSearchTerm={handleSearch} />
            )}

            {isDjMode ? (
              <DjInterface 
                currentSong={currentSong} 
                onPlaySong={playSong}
                requestQueue={requestQueue}
                setRequestQueue={setRequestQueue}
              />
            ) : (
              <>
                <Sorting 
                  sortCriteria={sortCriteria} 
                  setSortCriteria={setSortCriteria}
                  sortOrder={sortOrder}
                  setSortOrder={setSortOrder}
                />
                {isLoading ? (
                  <LoadingIndicator />
                ) : (
                  sortedSongs().length > 0 && (
                    <>
                      <SongList 
                        songs={getCurrentSongs()} 
                        onPlaySong={playSong} 
                        onSuggestSong={handleSuggestSong}
                      />
                      <Pagination 
                        currentPage={currentPage}
                        totalPages={totalPages}
                        onPageChange={handlePageChange}
                      />
                    </>
                  )
                )}
                {isLoggedIn && <SuggestionQueue userId={userId} />}
              </>
            )}
          </>
        )}
      </main>
      
      <DynamicTheme 
        albumCover={currentAlbumCover}
        isEnabled={isDynamicThemeEnabled}
      />
      <ThemeCarousel
        currentTheme={currentTheme}
        setCurrentTheme={setCurrentTheme}
        isDynamicThemeEnabled={isDynamicThemeEnabled}
        setIsDynamicThemeEnabled={setIsDynamicThemeEnabled}
      />

      <AudioVisualizer className="animated-element" />

      {currentSong && (
        <AudioPlayer 
          audioSrc={currentSong.preview_url}
          songTitle={currentSong.name}
          artistName={currentSong.artists}
          albumCover={currentSong.album_image}
          isPlaying={isPlaying}
          setIsPlaying={setIsPlaying}
          onClose={closeAudioPlayer}
          primaryColor={currentTheme.primary}
          secondaryColor={currentTheme.secondary}
          className="animated-element"
        />
      )}
    </motion.div>
  );
}

export default App;import SpotifyWebApi from 'spotify-web-api-js';

const spotifyApi = new SpotifyWebApi();

export const authorizeSpotify = () => {
  const scopes = [
    'user-read-private',
    'user-read-email',
    'user-read-playback-state',
    'user-modify-playback-state',
    'streaming'
  ];

  const url = `https://accounts.spotify.com/authorize?client_id=${process.env.CLIENT_ID}&redirect_uri=${process.env.REDIRECT_URI}&scope=${scopes.join('%20')}&response_type=token&show_dialog=true`;
  window.location.href = url;
};

export const setAccessToken = (token) => {
  console.log('Setting access token:', token);
  if (token) {
    spotifyApi.setAccessToken(token);
  } else {
    console.error('No token provided to setAccessToken');
  }
};

export const searchTracks = async (query) => {
  if (!spotifyApi.getAccessToken()) {
    console.error('No access token set. Please authenticate first.');
    throw new Error('No access token set. Please authenticate first.');
  }
  if (!query.trim()) {
    console.error('Empty search query');
    return [];
  }
  try {
    console.log('Searching tracks with query:', query);
    const response = await spotifyApi.searchTracks(query, { limit: 20 });
    console.log('Raw Spotify API response:', JSON.stringify(response, null, 2));
    
    if (response && response.tracks && Array.isArray(response.tracks.items)) {
      const formattedResults = response.tracks.items.map(track => ({
        id: track.id,
        name: track.name,
        artists: track.artists.map(artist => artist.name).join(', '),
        album: track.album.name,
        preview_url: track.preview_url,
        album_image: track.album.images[0]?.url
      }));
      console.log('Formatted results:', JSON.stringify(formattedResults, null, 2));
      return formattedResults;
    } else {
      console.error('Unexpected response structure:', JSON.stringify(response, null, 2));
      return [];
    }
  } catch (error) {
    console.error('Error searching tracks:', error);
    if (error.status === 401) {
      console.error('Unauthorized: Token may have expired');
    }
    throw error;
  }
};
export const getTrack = async (trackId) => {
  try {
    return await spotifyApi.getTrack(trackId);
  } catch (error) {
    console.error('Error getting track:', error);
    return null;
  }
};

export const playTrack = async (trackUri) => {
  try {
    await spotifyApi.play({ uris: [trackUri] });
  } catch (error) {
    console.error('Error playing track:', error);
  }
};

export const pausePlayback = async () => {
  try {
    await spotifyApi.pause();
  } catch (error) {
    console.error('Error pausing playback:', error);
  }
};

export const resumePlayback = async () => {
  try {
    await spotifyApi.play();
  } catch (error) {
    console.error('Error resuming playback:', error);
  }
};

export const skipToNext = async () => {
  try {
    await spotifyApi.skipToNext();
  } catch (error) {
    console.error('Error skipping to next track:', error);
  }
};

export const skipToPrevious = async () => {
  try {
    await spotifyApi.skipToPrevious();
  } catch (error) {
    console.error('Error skipping to previous track:', error);
  }
};let votingQueue = [];

export const getVotingQueue = async () => {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve([...votingQueue]);
    }, 500);
  });
};

export const submitVote = async (userId, songId, voteType) => {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      const songIndex = votingQueue.findIndex(song => song.id === songId);
      if (songIndex === -1) {
        reject(new Error('Canción no encontrada'));
        return;
      }

      if (votingQueue[songIndex].userVoted && votingQueue[songIndex].userVoted[userId]) {
        reject(new Error('Ya has votado por esta canción'));
        return;
      }

      const voteChange = voteType === 'upvote' ? 1 : -1;
      votingQueue[songIndex] = {
        ...votingQueue[songIndex],
        votes: (votingQueue[songIndex].votes || 0) + voteChange,
        trend: voteChange,
        userVoted: { ...votingQueue[songIndex].userVoted, [userId]: true }
      };

      resolve({ success: true, updatedSong: votingQueue[songIndex] });
    }, 500);
  });
};

export const addToVotingQueue = async (song) => {
  return new Promise((resolve) => {
    setTimeout(() => {
      const existingSong = votingQueue.find(s => s.id === song.id);
      if (!existingSong) {
        const newSong = {
          id: song.id,
          songTitle: song.songTitle || song.name,
          artistName: song.artistName || song.artists,
          album: song.album,
          album_image: song.album_image,
          votes: 0,
          trend: 0,
          userVoted: {}
        };
        votingQueue.push(newSong);
        resolve({ success: true, addedSong: newSong });
      } else {
        resolve({ success: false, message: 'La canción ya está en la cola de votación' });
      }
    }, 500);
  });
};const mockApiDelay = 1000;
const MAX_REQUESTS_PER_USER = 3;
const REQUEST_COOLDOWN = 15 * 60 * 1000; // 15 minutos en milisegundos

let userRequests = {};
let requestQueue = [];

export const submitSongRequest = async (request, userId) => {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      if (!userRequests[userId]) {
        userRequests[userId] = [];
      }

      // Limpiar solicitudes antiguas
      const now = Date.now();
      userRequests[userId] = userRequests[userId].filter(
        req => now - req.timestamp < REQUEST_COOLDOWN
      );

      if (userRequests[userId].length >= MAX_REQUESTS_PER_USER) {
        reject({ 
          status: 'error', 
          message: `Has alcanzado el límite de ${MAX_REQUESTS_PER_USER} solicitudes en 15 minutos. Por favor, espera antes de hacer otra solicitud.` 
        });
      } else if (Math.random() > 0.1) { // 90% de probabilidad de éxito
        userRequests[userId].push({ timestamp: now });
        const newRequest = { id: Date.now(), ...request, status: 'pending' };
        requestQueue.push(newRequest);
        resolve({ status: 'success', message: 'Solicitud enviada con éxito' });
      } else {
        reject({ status: 'error', message: 'Error al enviar la solicitud' });
      }
    }, mockApiDelay);
  });
};

export const getRemainingRequests = (userId) => {
  if (!userRequests[userId]) {
    return MAX_REQUESTS_PER_USER;
  }

  const now = Date.now();
  const activeRequests = userRequests[userId].filter(
    req => now - req.timestamp < REQUEST_COOLDOWN
  );

  return Math.max(0, MAX_REQUESTS_PER_USER - activeRequests.length);
};

export const getRequestQueue = async () => {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve(requestQueue.filter(req => req.status === 'pending'));
    }, 500);
  });
};

export const updateRequestStatus = async (requestId, status) => {
  return new Promise((resolve) => {
    setTimeout(() => {
      const index = requestQueue.findIndex(req => req.id === requestId);
      if (index !== -1) {
        requestQueue[index].status = status;
        if (status === 'accepted' || status === 'rejected') {
          requestQueue.splice(index, 1);
        }
      }
      resolve({ status: 'success', message: 'Estado de la solicitud actualizado' });
    }, 500);
  });
};@keyframes pulse {
  0% { transform: scale(1); }
  50% { transform: scale(1.05); }
  100% { transform: scale(1); }
}

@keyframes glowPulse {
  0% { box-shadow: 0 0 5px var(--primary); }
  50% { box-shadow: 0 0 20px var(--primary); }
  100% { box-shadow: 0 0 5px var(--primary); }
}

.fade-in {
  animation: fadeIn 0.3s ease-in;
}

.slide-in {
  animation: slideInFromBottom 0.3s ease-out;
}

.pulse {
  animation: pulse 1s infinite;
}

.glow-pulse {
  animation: glowPulse 2s infinite;
}

.transition-all {
  transition: all 0.3s ease;
}:root {
  --primary: #39FF14;
  --secondary: #00FFFF;
  --background: #000000;
  --text: #FFFFFF;
  --accent: #FF1493;
  --hover: #40E0D0;
  --font: 'Orbitron', sans-serif;
  --primary-rgb: 57, 255, 20;
  --secondary-rgb: 0, 255, 255;
  --text-rgb: 255, 255, 255;
}

body {
  font-family: var(--font);
  background-color: var(--background);
  background-image: var(--background-pattern);
  background-size: cover;
  background-repeat: repeat;
  color: var(--text);
  margin: 0;
  padding: 0;
  overflow-x: hidden;
  transition: background-color 0.5s ease, color 0.5s ease, background-image 0.5s ease;
}

.App {
  max-width: 800px;
  margin: 0 auto;
  padding: 20px 20px 100px;
  background-color: rgba(0, 0, 0, 0.8);
  box-shadow: 0 0 20px var(--primary);
  border-radius: 10px;
}

.app-title {
  color: var(--primary);
  font-size: 3em;
  text-shadow: 0 0 10px var(--primary), 0 0 20px var(--primary), 0 0 30px var(--primary);
  margin: 0;
  animation: pulsate 1.5s infinite alternate;
}
.app-nav {
  display: flex;
  justify-content: center;
  gap: 20px;
  margin-bottom: 20px;
}

.app-nav button,
.nav-auth-button {
  padding: 10px 20px;
  font-size: 1em;
  color: var(--primary);
  background: transparent;
  border: 2px solid var(--primary);
  border-radius: 5px;
  cursor: pointer;
  transition: all 0.3s ease;
  text-transform: uppercase;
  letter-spacing: 1px;
}

.app-nav button:hover,
.nav-auth-button:hover {
  background: var(--primary);
  color: var(--background);
  box-shadow: 0 0 15px var(--primary);
}

@keyframes pulsate {
  100% { text-shadow: 0 0 5px var(--primary), 0 0 10px var(--primary), 0 0 15px var(--primary); }
}

.search-bar, .sort-select, .page-link {
  background-color: var(--background);
  border: 2px solid var(--primary);
  color: var(--secondary);
  border-radius: 25px;
  transition: all 0.3s ease;
}

.search-bar {
  width: 100%;
  padding: 10px;
  margin-bottom: 20px;
  font-size: 16px;
}

.search-bar:focus {
  outline: none;
  box-shadow: 0 0 10px var(--secondary);
}

.song-list {
  list-style-type: none;
  padding: 0;
}

.song-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: rgba(var(--primary-rgb), 0.1);
  margin-bottom: 10px;
  padding: 15px;
  border-radius: 10px;
  transition: all 0.3s ease;
  border: 1px solid var(--primary);
}

.song-item:hover {
  transform: scale(1.03);
  box-shadow: 0 0 15px var(--primary);
}

.song-info h3 { color: var(--primary); margin: 0; }
.song-info p { color: var(--secondary); margin: 5px 0 0; }

.song-genre {
  background-color: rgba(var(--secondary-rgb), 0.2);
  padding: 5px 10px;
  border-radius: 20px;
  font-size: 0.8em;
  color: var(--secondary);
}

.spotify-auth-button,
.party-mode-toggle,
.dj-mode-toggle {
  background-color: var(--primary);
  color: var(--background);
  border: none;
  padding: 10px 20px;
  border-radius: 25px;
  cursor: pointer;
  font-weight: bold;
  transition: all 0.3s ease;
  text-transform: uppercase;
  letter-spacing: 1px;
  box-shadow: 0 0 10px var(--primary);
}

.spotify-auth-button:hover,
.party-mode-toggle:hover,
.dj-mode-toggle:hover {
  background-color: var(--secondary);
  color: var(--background);
  box-shadow: 0 0 20px var(--secondary);
}

.app-main {
  padding: 0 20px;
}
.request-button, .party-mode-toggle, .request-form-toggle, .dj-mode-toggle, .spotify-auth-button, .theme-button {
  background-color: var(--primary);
  color: var(--background);
  border: none;
  padding: 10px 20px;
  border-radius: 25px;
  cursor: pointer;
  font-weight: bold;
  transition: all 0.3s ease;
  text-transform: uppercase;
  letter-spacing: 1px;
  box-shadow: 0 0 10px var(--primary);
}

.request-button:hover, .party-mode-toggle:hover, .request-form-toggle:hover, .dj-mode-toggle:hover, .spotify-auth-button:hover, .theme-button:hover {
  background-color: var(--background);
  color: var(--primary);
  box-shadow: 0 0 20px var(--primary);
}

.pagination {
  display: flex;
  justify-content: center;
  list-style-type: none;
  padding: 0;
  margin-top: 20px;
}

.page-item { margin: 0 5px; }

.page-link {
  padding: 8px 16px;
  text-decoration: none;
}

.page-item.active .page-link {
  background-color: var(--primary);
  color: var(--background);
}

.sorting-controls {
  display: flex;
  justify-content: center;
  margin-bottom: 20px;
}

.sort-select {
  padding: 10px;
  margin-right: 10px;
  cursor: pointer;
}

.sort-order-btn {
  padding: 10px 15px;
  background-color: var(--primary);
  border: none;
  border-radius: 25px;
  color: var(--background);
  font-size: 1.2em;
  cursor: pointer;
  transition: all 0.3s ease;
}

.sort-order-btn:hover {
  background-color: var(--background);
  color: var(--primary);
  box-shadow: 0 0 20px var(--primary);
}

.audio-visualizer {
  position: fixed;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 100px;
  z-index: 10;
  opacity: 0.7;
  transition: opacity 0.3s ease;
}

.audio-visualizer:hover { opacity: 1; }

.party-mode.techno {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 20;
  overflow: hidden;
  background-color: rgba(0, 0, 0, 0.2);
}

.grid-line {
  position: absolute;
  opacity: 0.5;
  animation: fadeInOut 2s linear;
}

.grid-line.horizontal { width: 100%; height: 1px; }
.grid-line.vertical { width: 1px; height: 100%; }

@keyframes fadeInOut {
  0%, 100% { opacity: 0; }
  50% { opacity: 0.5; }
}

.pulse {
  position: absolute;
  border-radius: 50%;
  border: 2px solid;
  opacity: 0;
  animation: pulsate 1s ease-out;
}

@keyframes pulsate {
  0% { transform: scale(0.1); opacity: 0; }
  50% { opacity: 0.5; }
  100% { transform: scale(1.5); opacity: 0; }
}

.glitch {
  position: absolute;
  opacity: 0.7;
  animation: glitchEffect 0.15s linear;
}

@keyframes glitchEffect {
  0% { transform: translate(0); }
  20% { transform: translate(-5px, 5px); }
  40% { transform: translate(-5px, -5px); }
  60% { transform: translate(5px, 5px); }
  80% { transform: translate(5px, -5px); }
  100% { transform: translate(0); }
}

.waveform {
  position: absolute;
  left: 0;
  width: 100%;
  height: 2px;
  opacity: 0.7;
  animation: waveMove 3s linear;
}

@keyframes waveMove {
  0% { transform: translateY(0) scaleY(1); }
  50% { transform: translateY(-50vh) scaleY(2); }
  100% { transform: translateY(-100vh) scaleY(1); opacity: 0; }
}

.glitch-text {
  position: relative;
  display: inline-block;
}

.glitch-text::before,
.glitch-text::after {
  content: attr(data-text);
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.glitch-text::before {
  left: 2px;
  text-shadow: -2px 0 var(--secondary);
  clip: rect(24px, 550px, 90px, 0);
  animation: glitch-anim-2 3s infinite linear alternate-reverse;
}

.glitch-text::after {
  left: -2px;
  text-shadow: -2px 0 var(--primary);
  clip: rect(85px, 550px, 140px, 0);
  animation: glitch-anim 2.5s infinite linear alternate-reverse;
}

@keyframes glitch-anim {
  0% { clip: rect(17px, 9999px, 94px, 0); }
  20% { clip: rect(33px, 9999px, 31px, 0); }
  40% { clip: rect(95px, 9999px, 62px, 0); }
  60% { clip: rect(90px, 9999px, 100px, 0); }
  80% { clip: rect(51px, 9999px, 35px, 0); }
  100% { clip: rect(5px, 9999px, 83px, 0); }
}

@keyframes glitch-anim-2 {
  0% { clip: rect(34px, 9999px, 27px, 0); }
  20% { clip: rect(86px, 9999px, 7px, 0); }
  40% { clip: rect(43px, 9999px, 50px, 0); }
  60% { clip: rect(67px, 9999px, 98px, 0); }
  80% { clip: rect(71px, 9999px, 21px, 0); }
  100% { clip: rect(8px, 9999px, 93px, 0); }
}

.song-request-form {
  background-color: rgba(0, 0, 0, 0.8);
  padding: 20px;
  border-radius: 10px;
  margin-bottom: 20px;
}

.song-request-form input,
.song-request-form textarea {
  width: 100%;
  padding: 10px;
  margin-bottom: 10px;
  background-color: var(--background);
  border: 2px solid var(--secondary);
  border-radius: 5px;
  color: var(--secondary);
}

.request-status {
  padding: 10px;
  border-radius: 5px;
  margin-bottom: 20px;
  text-align: center;
  font-weight: bold;
}

.request-status.pending {
  background-color: var(--secondary);
  color: var(--background);
}

.request-status.success {
  background-color: var(--primary);
  color: var(--background);
}

.request-status.error {
  background-color: #FF6600;
  color: var(--background);
}

.remaining-requests {
  color: var(--secondary);
  text-align: center;
  margin-top: 10px;
  font-weight: bold;
}

.dj-interface {
  background-color: rgba(0, 0, 0, 0.8);
  border: 2px solid var(--primary);
  border-radius: 10px;
  padding: 20px;
  margin-bottom: 20px;
}

.dj-interface h2, .dj-interface h3 {
  color: var(--primary);
  text-align: center;
}

.dj-interface .current-song {
  background-color: rgba(var(--primary-rgb), 0.1);
  padding: 10px;
  border-radius: 5px;
  margin-bottom: 20px;
}

.dj-interface .request-queue ul {
  list-style-type: none;
  padding: 0;
}

.dj-interface .request-queue li {
  background-color: rgba(var(--secondary-rgb), 0.1);
  margin-bottom: 10px;
  padding: 10px;
  border-radius: 5px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.dj-interface button {
  background-color: var(--primary);
  color: var(--background);
  border: none;
  padding: 5px 10px;
  border-radius: 5px;
  cursor: pointer;
  margin-left: 10px;
  transition: all 0.3s ease;
}

.dj-interface button:hover {
  background-color: var(--secondary);
  color: var(--background);
}

.play-button {
  background-color: var(--primary);
  color: var(--background);
  border: none;
  padding: 8px 15px;
  border-radius: 50%;
  cursor: pointer;
  font-weight: bold;
  transition: all 0.3s ease;
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.play-button:hover {
  background-color: var(--secondary);
  color: var(--background);
  box-shadow: 0 0 15px var(--secondary);
}

.request-queue, .voting-screen {
  background-color: rgba(0, 0, 0, 0.8);
  border: 2px solid var(--primary);
  border-radius: 10px;
  padding: 20px;
  margin-top: 20px;
}

.request-queue h2, .voting-screen h2 {
  color: var(--primary);
  text-align: center;
}

.request-queue ul, .voting-queue {
  list-style-type: none;
  padding: 0;
}

.queue-item, .voting-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: rgba(var(--primary-rgb), 0.1);
  margin-bottom: 10px;
  padding: 10px;
  border-radius: 5px;
  transition: all 0.3s ease;
}

.queue-item:hover, .voting-item:hover {
  background-color: rgba(var(--primary-rgb), 0.2);
}

.queue-position {
  color: var(--secondary);
  font-weight: bold;
  margin-right: 10px;
}

.queue-song, .song-title {
  color: var(--primary);
  font-weight: bold;
  margin-right: 10px;
}

.queue-artist, .song-artist {
  color: var(--secondary);
  margin-left: 10px;
}

.vote-count {
  color: #FFFF00;
  font-weight: bold;
  margin: 0 20px;
}

.trend-up { color: var(--primary); }
.trend-down { color: #FF6600; }

.trend-up { color: var(--primary); }
.trend-down { color: #FF6600; }
.trend-neutral { color: #FFFF00; }

.vote-buttons button {
  background-color: transparent;
  border: none;
  font-size: 1.5em;
  cursor: pointer;
  padding: 5px;
  transition: all 0.3s ease;
}

.vote-buttons button:hover {
  transform: scale(1.2);
}

.vote-buttons button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.vote-buttons button.voted {
  color: var(--primary);
}

.techno-lines {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  pointer-events: none;
  z-index: -1;
}

.techno-line {
  position: absolute;
  background-color: var(--primary);
  animation: moveLine 8s linear infinite;
  transition: transform 0.1s ease-out;
}

@keyframes moveLine {
  0% { transform: translateY(-100%); }
  100% { transform: translateY(100vh); }
}

.techno-line.pulse {
  animation: moveLine 8s linear infinite, pulseLine 0.5s ease-out;
}

@keyframes pulseLine {
  0%, 100% {
    opacity: 1;
    box-shadow: 0 0 10px var(--primary);
  }
  50% {
    opacity: 0.7;
    box-shadow: 0 0 20px var(--primary);
  }
}

.theme-selector {
  position: fixed;
  top: 20px;
  right: 20px;
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  z-index: 1000;
}

.dynamic-theme-toggle,
.show-all-themes-button {
  margin-bottom: 10px;
  padding: 10px 15px;
  background-color: var(--primary);
  color: var(--background);
  border: none;
  border-radius: 20px;
  cursor: pointer;
  transition: all 0.3s ease;
}

.dynamic-theme-toggle:hover,
.show-all-themes-button:hover {
  background-color: var(--secondary);
}

.theme-buttons-container {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  padding-top: 15px;
}

.theme-button {
  margin: 5px 0;
  padding: 8px 15px;
  background-color: var(--primary);
  color: var(--background);
  border: none;
  border-radius: 20px;
  cursor: pointer;
  transition: all 0.3s ease;
}

.theme-button:hover {
  background-color: var(--secondary);
  transform: translateX(-5px);
}

.theme-button.active {
  background-color: var(--text);
  color: var(--background);
  box-shadow: 0 0 10px var(--primary);
}

.theme-button.active.glow-pulse {
  animation: glowPulse 2s infinite;
}

@keyframes glowPulse {
  0% { box-shadow: 0 0 5px var(--primary); }
  50% { box-shadow: 0 0 20px var(--primary); }
  100% { box-shadow: 0 0 5px var(--primary); }
}

/* Estilos para el AudioPlayer */
.audio-player-futuristic {
  position: fixed;
  top: 110px;
  left: 90px;
  width: 300px;
  height: 500px;
  background: linear-gradient(145deg, rgba(0, 0, 0, 0.8) 0%, rgba(20, 20, 20, 0.9) 100%);
  color: var(--primary);
  padding: 20px;
  border-radius: 20px;
  box-shadow: 0 0 30px rgba(var(--primary-rgb), 0.5), inset 0 0 15px rgba(var(--secondary-rgb), 0.3);
  z-index: 1000;
  backdrop-filter: blur(10px);
  overflow: hidden;
  transform: perspective(1000px) rotateY(-15deg);
  transition: all 0.5s ease;
}

.audio-player-futuristic:hover {
  transform: perspective(1000px) rotateY(0deg) scale(1.05);
}

.holographic-display {
  position: relative;
  height: 200px;
  margin-bottom: 20px;
  overflow: hidden;
  border-radius: 10px;
  background: rgba(var(--secondary-rgb), 0.1);
}

.song-info-hologram {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  text-align: center;
  z-index: 2;
  animation: hologramFloat 3s ease-in-out infinite;
}

@keyframes hologramFloat {
  0%, 100% { transform: translate(-50%, -50%); }
  50% { transform: translate(-50%, -55%); }
}

.song-info-hologram h3 {
  font-size: 1.8em;
  margin: 0;
  text-shadow: 0 0 10px var(--primary), 0 0 20px var(--primary);
  animation: hologramFlicker 5s infinite alternate;
}

.song-info-hologram p {
  font-size: 1em;
  margin: 5px 0 0;
  color: var(--secondary);
  text-shadow: 0 0 8px var(--secondary), 0 0 16px var(--secondary);
}

@keyframes hologramFlicker {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.7; }
}

.visualizer {
  display: flex;
  justify-content: space-around;
  align-items: flex-end;
  height: 100%;
  padding: 0 10px;
}

.visualizer-bar {
  width: 3px;
  background: linear-gradient(to top, var(--primary), var(--secondary));
  animation: barPulse 0.5s infinite alternate;
}

@keyframes barPulse {
  to { height: 100%; }
}

.controls-panel {
  display: flex;
  justify-content: center;
  align-items: center;
  margin-bottom: 20px;
}

.control-button, .play-pause-button {
  background: none;
  border: 2px solid var(--primary);
  color: var(--primary);
  font-size: 1.2em;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 0 10px;
}

.play-pause-button {
  font-size: 1.5em;
  width: 50px;
  height: 50px;
  background-color: var(--primary);
  color: var(--background);
}

.control-button:hover, .play-pause-button:hover {
  transform: scale(1.1);
  box-shadow: 0 0 15px var(--primary);
}

.progress-container, .volume-container {
  display: flex;
  align-items: center;
  margin-bottom: 15px;
}

.progress-slider, .volume-slider {
  -webkit-appearance: none;
  width: 100%;
  height: 5px;
  border-radius: 5px;
  background: rgba(var(--secondary-rgb), 0.3);
  outline: none;
  transition: all 0.3s ease;
  overflow: visible;
}

.progress-slider::-webkit-slider-runnable-track,
.volume-slider::-webkit-slider-runnable-track {
  background: var(--primary);
  height: 5px;
  border-radius: 5px;
}

.progress-slider::-moz-range-track,
.volume-slider::-moz-range-track {
  background: var(--primary);
  height: 5px;
  border-radius: 5px;
}

.progress-slider::-webkit-slider-thumb,
.volume-slider::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  width: 15px;
  height: 15px;
  border-radius: 50%;
  background: var(--secondary);
  cursor: pointer;
  box-shadow: 0 0 5px var(--secondary);
  margin-top: -5px;
}

.progress-slider::-moz-range-thumb,
.volume-slider::-moz-range-thumb {
  width: 15px;
  height: 15px;
  border-radius: 50%;
  background: var(--secondary);
  cursor: pointer;
  box-shadow: 0 0 5px var(--secondary);
}

.volume-button {
  background: none;
  border: none;
  color: var(--primary);
  font-size: 1.2em;
  cursor: pointer;
  margin-right: 10px;
}

.close-button {
  position: absolute;
  top: 10px;
  right: 10px;
  background: none;
  border: none;
  color: var(--primary);
  font-size: 1.2em;
  cursor: pointer;
  transition: all 0.3s ease;
}

.close-button:hover {
  color: var(--secondary);
  transform: scale(1.1);
}

.hologram-effect {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(45deg, transparent 0%, rgba(var(--primary-rgb), 0.1) 50%, transparent 100%);
  animation: hologramScan 5s linear infinite;
}

@keyframes hologramScan {
  0% { transform: translateY(-100%); }
  100% { transform: translateY(100%); }
}

/* Efecto de líneas escaneadas */
.audio-player-futuristic::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: repeating-linear-gradient(
    0deg,
    rgba(var(--secondary-rgb), 0.1),
    rgba(var(--secondary-rgb), 0.1) 1px,
    transparent 1px,
    transparent 2px
  );
  pointer-events: none;
}

/* Efecto de borde brillante */
.audio-player-futuristic::after {
  content: '';
  position: absolute;
  top: -2px;
  left: -2px;
  right: -2px;
  bottom: -2px;
  background: linear-gradient(45deg, var(--primary), var(--secondary));
  border-radius: 22px;
  z-index: -1;
  filter: blur(5px);
  opacity: 0.7;
  animation: borderGlow 3s infinite alternate;
}

@keyframes borderGlow {
  0% { opacity: 0.5; }
  100% { opacity: 1; }
}

.progress-slider::-webkit-slider-container,
.volume-slider::-webkit-slider-container {
  background: linear-gradient(to right, var(--primary) 0%, var(--primary) 50%, rgba(var(--secondary-rgb), 0.3) 50%, rgba(var(--secondary-rgb), 0.3) 100%);
  border-radius: 5px;
}

@media (max-width: 768px) {
  .theme-selector {
    position: static;
    flex-direction: row;
    justify-content: center;
    flex-wrap: wrap;
    margin: 10px 0;
  }

  .theme-button {
    margin: 5px;
  }

  .theme-button:hover {
    transform: translateY(-3px);
  }

  .audio-player-futuristic {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) perspective(1000px) rotateY(-15deg);
    width: 90%;
    height: auto;
    max-height: 80vh;
  }

  .audio-player-futuristic:hover {
    transform: translate(-50%, -50%) perspective(1000px) rotateY(0deg) scale(1.05);
  }
}

.holographic-display {
  position: relative;
  height: 200px;
  margin-bottom: 20px;
  overflow: hidden;
  border-radius: 10px;
  background: rgba(var(--secondary-rgb), 0.1);
}

.song-info-hologram {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  text-align: center;
  z-index: 2;
  animation: hologramFloat 3s ease-in-out infinite;
}

@keyframes hologramFloat {
  0%, 100% { transform: translate(-50%, -50%); }
  50% { transform: translate(-50%, -55%); }
}

.song-info-hologram h3 {
  font-size: 1.8em;
  margin: 0;
  text-shadow: 0 0 10px var(--primary), 0 0 20px var(--primary);
  animation: hologramFlicker 5s infinite alternate;
}

.song-info-hologram p {
  font-size: 1em;
  margin: 5px 0 0;
  color: var(--secondary);
  text-shadow: 0 0 8px var(--secondary), 0 0 16px var(--secondary);
}

@keyframes hologramFlicker {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.7; }
}

.visualizer {
  display: flex;
  justify-content: space-around;
  align-items: flex-end;
  height: 100%;
  padding: 0 10px;
}

.visualizer-bar {
  width: 3px;
  background: linear-gradient(to top, var(--primary), var(--secondary));
  animation: barPulse 0.5s infinite alternate;
}

@keyframes barPulse {
  to { height: 100%; }
}

.controls-panel {
  display: flex;
  justify-content: center;
  align-items: center;
  margin-bottom: 20px;
}

.control-button, .play-pause-button {
  background: none;
  border: 2px solid var(--primary);
  color: var(--primary);
  font-size: 1.2em;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 0 10px;
}

.play-pause-button {
  font-size: 1.5em;
  width: 50px;
  height: 50px;
  background-color: var(--primary);
  color: var(--background);
}

.control-button:hover, .play-pause-button:hover {
  transform: scale(1.1);
  box-shadow: 0 0 15px var(--primary);
}

.progress-container, .volume-container {
  display: flex;
  align-items: center;
  margin-bottom: 15px;
}


.progress-slider, .volume-slider {
  -webkit-appearance: none;
  width: 100%;
  height: 5px;
  border-radius: 5px;
  background: rgba(var(--secondary-rgb), 0.3);
  outline: none;
  transition: all 0.3s ease;
  overflow: visible; /* Asegura que el thumb sea visible */
}

.progress-slider::-webkit-slider-runnable-track,
.volume-slider::-webkit-slider-runnable-track {
  background: var(--primary);
  height: 5px;
  border-radius: 5px;
}

.progress-slider::-moz-range-track,
.volume-slider::-moz-range-track {
  background: var(--primary);
  height: 5px;
  border-radius: 5px;
}

.progress-slider::-webkit-slider-thumb,
.volume-slider::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  width: 15px;
  height: 15px;
  border-radius: 50%;
  background: var(--secondary);
  cursor: pointer;
  box-shadow: 0 0 5px var(--secondary);
  margin-top: -5px; /* Centra el thumb verticalmente */
}

.progress-slider::-moz-range-thumb,
.volume-slider::-moz-range-thumb {
  width: 15px;
  height: 15px;
  border-radius: 50%;
  background: var(--secondary);
  cursor: pointer;
  box-shadow: 0 0 5px var(--secondary);
}

.volume-button {
  background: none;
  border: none;
  color: var(--primary);
  font-size: 1.2em;
  cursor: pointer;
  margin-right: 10px;
}

.close-button {
  position: absolute;
  top: 10px;
  right: 10px;
  background: none;
  border: none;
  color: var(--primary);
  font-size: 1.2em;
  cursor: pointer;
  transition: all 0.3s ease;
}

.close-button:hover {
  color: var(--secondary);
  transform: scale(1.1);
}

.hologram-effect {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(45deg, transparent 0%, rgba(var(--primary-rgb), 0.1) 50%, transparent 100%);
  animation: hologramScan 5s linear infinite;
}

@keyframes hologramScan {
  0% { transform: translateY(-100%); }
  100% { transform: translateY(100%); }
}

/* Efecto de líneas escaneadas */
.audio-player-futuristic::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: repeating-linear-gradient(
    0deg,
    rgba(var(--secondary-rgb), 0.1),
    rgba(var(--secondary-rgb), 0.1) 1px,
    transparent 1px,
    transparent 2px
  );
  pointer-events: none;
}

/* Efecto de borde brillante */
.audio-player-futuristic::after {
  content: '';
  position: absolute;
  top: -2px;
  left: -2px;
  right: -2px;
  bottom: -2px;
  background: linear-gradient(45deg, var(--primary), var(--secondary));
  border-radius: 22px;
  z-index: -1;
  filter: blur(5px);
  opacity: 0.7;
  animation: borderGlow 3s infinite alternate;
}

@keyframes borderGlow {
  0% { opacity: 0.5; }
  100% { opacity: 1; }
}
.progress-slider::-webkit-slider-container,
.volume-slider::-webkit-slider-container {
  background: linear-gradient(to right, var(--primary) 0%, var(--primary) 50%, rgba(var(--secondary-rgb), 0.3) 50%, rgba(var(--secondary-rgb), 0.3) 100%);
  border-radius: 5px;
}
.dynamic-theme-toggle {
  background-color: var(--primary);
  color: var(--background);
  border: none;
  padding: 10px 20px;
  border-radius: 25px;
  cursor: pointer;
  font-weight: bold;
  margin: 10px;
  transition: all 0.3s ease;
  text-transform: uppercase;
  letter-spacing: 1px;
  box-shadow: 0 0 10px var(--primary);
}

.dynamic-theme-toggle:hover {
  background-color: var(--secondary);
  color: var(--text);
  box-shadow: 0 0 20px var(--secondary);
}
@media (max-width: 768px) {
  .app-nav {
    flex-direction: column;
    align-items: center;
  }

  .spotify-auth-button,
  .party-mode-toggle,
  .dj-mode-toggle {
    width: 100%;
    margin-bottom: 10px;
  }
}
.auth-container {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(45deg, var(--background), var(--primary));
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.auth-form {
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  border-radius: 20px;
  padding: 40px;
  width: 400px;
  box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
  overflow: hidden;
  position: relative;
}

.auth-form::before,
.auth-form::after {
  content: '';
  position: absolute;
  top: -50%;
  left: -50%;
  width: 200%;
  height: 200%;
  background: linear-gradient(
    0deg,
    transparent,
    var(--primary),
    var(--primary)
  );
  transform-origin: bottom right;
  animation: animate 6s linear infinite;
}

.auth-form::after {
  background: linear-gradient(
    0deg,
    transparent,
    var(--secondary),
    var(--secondary)
  );
  animation-delay: -3s;
}

@keyframes animate {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

.auth-content {
  position: relative;
  z-index: 10;
  padding: 20px;
  border-radius: 10px;
  background: rgba(0, 0, 0, 0.5);
  backdrop-filter: blur(15px);
}

.auth-form h2 {
  color: var(--primary);
  text-align: center;
  font-size: 2.5em;
  margin-bottom: 30px;
  text-transform: uppercase;
  letter-spacing: 3px;
}

.input-group {
  position: relative;
  margin-bottom: 30px;
}

.input-group input {
  width: 100%;
  padding: 10px 0;
  font-size: 1em;
  color: var(--text);
  border: none;
  border-bottom: 2px solid var(--primary);
  outline: none;
  background: transparent;
  transition: 0.5s;
  -webkit-autofill: none;
  box-shadow: 0 0 0px 1000px transparent inset;
  -webkit-text-fill-color: var(--text);
}

.input-group label {
  position: absolute;
  top: 0;
  left: 0;
  padding: 10px 0;
  font-size: 1em;
  color: var(--text);
  pointer-events: none;
  transition: 0.5s;
}

.input-group input:focus ~ label,
.input-group input:valid ~ label {
  top: -20px;
  left: 0;
  color: var(--primary);
  font-size: 0.8em;
}

.auth-form button {
  position: relative;
  display: inline-block;
  padding: 10px 20px;
  color: var(--primary);
  font-size: 16px;
  text-decoration: none;
  text-transform: uppercase;
  overflow: hidden;
  transition: 0.5s;
  margin-top: 40px;
  letter-spacing: 4px;
  background: transparent;
  border: none;
  cursor: pointer;
}

.auth-form button:hover {
  background: var(--primary);
  color: var(--background);
  border-radius: 5px;
  box-shadow: 0 0 5px var(--primary),
              0 0 25px var(--primary),
              0 0 50px var(--primary),
              0 0 100px var(--primary);
}

.auth-form .error-message {
  color: var(--error);
  text-align: center;
  margin-top: 20px;
}

.back-to-app-btn {
  position: absolute;
  top: 20px;
  left: 20px;
  padding: 10px 20px;
  background: var(--primary);
  color: var(--background);
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: all 0.3s ease;
  z-index: 11;
  font-weight: bold;
}

.back-to-app-btn:hover {
  background: var(--secondary);
  box-shadow: 0 0 15px var(--secondary);
}
.input-group input:-webkit-autofill,
.input-group input:-webkit-autofill:hover,
.input-group input:-webkit-autofill:focus,
.input-group input:-webkit-autofill:active {
  -webkit-background-clip: text;
  -webkit-text-fill-color: var(--text);
  transition: background-color 5000s ease-in-out 0s;
  box-shadow: inset 0 0 20px 20px transparent;
}

.input-group input:focus ~ label,
.input-group input:not(:placeholder-shown) ~ label {
  top: -20px;
  left: 0;
  color: var(--primary);
  font-size: 0.8em;
}.input-group select {
  width: 100%;
  padding: 10px 0;
  font-size: 1em;
  color: var(--text);
  border: none;
  border-bottom: 2px solid var(--primary);
  outline: none;
  background: transparent;
  transition: 0.5s;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-image: linear-gradient(45deg, transparent 50%, var(--primary) 50%),
  linear-gradient(135deg, var(--primary) 50%, transparent 50%);
background-position: calc(100% - 20px) calc(1em + 2px),
     calc(100% - 15px) calc(1em + 2px);
background-size: 5px 5px, 5px 5px;
background-repeat: no-repeat;
}

.input-group select:focus {
  border-color: var(--secondary);
}

.input-group select option {
  background-color: var(--background);
  color: var(--text);
}

/* Estilos para los botones de navegación */
.nav-auth-buttons {
  display: flex;
  justify-content: center;
  gap: 20px;
  margin-bottom: 20px;
}

.nav-auth-button {
  padding: 10px 20px;
  font-size: 1em;
  color: var(--text);
  background: transparent;
  border: 2px solid var(--primary);
  border-radius: 5px;
  cursor: pointer;
  transition: all 0.3s ease;
  text-transform: uppercase;
  letter-spacing: 1px;
}

.nav-auth-button:hover {
  background: var(--primary);
  color: var(--background);
  box-shadow: 0 0 15px var(--primary);
}.input-group select {
  width: 100%;
  padding: 10px 0;
  font-size: 1em;
  color: var(--text);
  border: none;
  border-bottom: 2px solid var(--primary);
  outline: none;
  background: transparent;
  transition: 0.5s;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  cursor: pointer;
}

.input-group select:focus {
  border-color: var(--secondary);
}

.input-group select option {
  background-color: var(--background);
  color: var(--text);
}

.input-group select::-ms-expand {
  display: none;
}

.input-group {
  position: relative;
}

.input-group::after {
  content: '\25BC';
  position: absolute;
  top: 50%;
  right: 10px;
  transform: translateY(-50%);
  color: var(--primary);
  pointer-events: none;
}
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

input[type="number"] {
  -moz-appearance: textfield;
}
.input-group::after {
  content: none;
}
.theme-carousel {
  position: fixed;
  top: 20px;
  right: 20px;
  z-index: 1000;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.dynamic-theme-toggle {
  background-color: var(--primary);
  color: var(--background);
  border: none;
  padding: 10px 15px;
  border-radius: 20px;
  cursor: pointer;
  margin-bottom: 20px;
  transition: all 0.3s ease;
  font-weight: bold;
  text-transform: uppercase;
}

.dynamic-theme-toggle:hover {
  background-color: var(--secondary);
  box-shadow: 0 0 15px var(--primary);
}

.carousel-container {
  display: flex;
  align-items: center;
  justify-content: center;
  background: rgba(0, 0, 0, 0.5);
  padding: 20px;
  border-radius: 30px;
  backdrop-filter: blur(10px);
  box-shadow: 0 0 20px rgba(var(--primary-rgb), 0.3);
}

.carousel-content {
  position: relative;
  width: 200px;
  height: 150px;
  overflow: hidden;
}

.carousel-button {
  background: none;
  border: none;
  color: var(--primary);
  font-size: 24px;
  cursor: pointer;
  transition: all 0.3s ease;
  padding: 10px;
  z-index: 2;
}

.carousel-button:hover {
  color: var(--secondary);
  transform: scale(1.2);
}

.theme-item {
  position: absolute;
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
}

.theme-preview {
  width: 150px;
  height: 100px;
  border-radius: 15px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  position: relative;
  overflow: hidden;
  transition: all 0.3s ease;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
}

.theme-preview:hover {
  transform: scale(1.05);
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.4);
}

.theme-name {
  font-size: 14px;
  font-weight: bold;
  text-transform: uppercase;
  margin-bottom: 10px;
}

.color-preview {
  width: 20px;
  height: 20px;
  border-radius: 50%;
  position: absolute;
}

.color-preview.primary {
  top: 10px;
  right: 10px;
}

.color-preview.secondary {
  bottom: 10px;
  right: 10px;
}

.theme-peek {
  position: absolute;
  top: 50%;
  width: 30px;
  height: 60px;
  border-radius: 10px;
  opacity: 0.5;
  transition: all 0.3s ease;
}

.theme-peek.prev {
  left: -15px;
  transform: translateY(-50%);
}

.theme-peek.next {
  right: -15px;
  transform: translateY(-50%);
}

.carousel-controls {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 20px;
}

.auto-play-button {
  background: none;
  border: none;
  color: var(--primary);
  font-size: 24px;
  cursor: pointer;
  transition: all 0.3s ease;
  margin-bottom: 10px;
}

.auto-play-button:hover {
  color: var(--secondary);
  transform: scale(1.2);
}

.theme-indicators {
  display: flex;
  justify-content: center;
  gap: 10px;
}

.theme-indicator {
  width: 10px;
  height: 10px;
  border-radius: 50%;
  border: none;
  cursor: pointer;
  transition: all 0.3s ease;
  opacity: 0.5;
}

.theme-indicator.active {
  opacity: 1;
  transform: scale(1.2);
}

@media (max-width: 768px) {
  .theme-carousel {
    position: static;
    margin-top: 20px;
  }
  
  .carousel-container {
    width: 90%;
    margin: 0 auto;
  }
}
.theme-transition {
  transition: background-color 0.3s ease, color 0.3s ease;
}

.animated-element {
  animation-duration: 2s;
  animation-iteration-count: infinite;
  animation-timing-function: ease-in-out;
}import React from 'react';
import ReactDOM from 'react-dom/client'; // Updated import for React 18
import { ThemeProvider } from 'styled-components';
import App from './App';

const theme = {
  primary: 'var(--primary)',
  secondary: 'var(--secondary)',
  background: 'var(--background)',
  text: 'var(--text)',
};

// Get the root DOM element
const rootElement = document.getElementById('root');

// Check if the root element exists
if (rootElement) {
  // Create a root using the new createRoot API
  const root = ReactDOM.createRoot(rootElement);
  
  root.render(
    <React.StrictMode>
      <ThemeProvider theme={theme}>
        <App />
      </ThemeProvider>
    </React.StrictMode>
  );
} else {
  console.error('Root element not found. Please ensure there is an element with id="root" in your HTML.');
}
export const themes = {
  pop: {
    light: {
      primary: '#FF69B4',
      secondary: '#00CED1',
      background: '#FFF0F5',
      text: '#333333',
      accent: '#FF1493',
      hover: '#40E0D0',
      font: "'Quicksand', sans-serif",
      buttonGradient: 'linear-gradient(45deg, #FF69B4, #00CED1)',
      boxShadow: '0 0 10px #FF69B4',
      animation: {
        name: 'popBounce',
        keyframes: `
          @keyframes popBounce {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
          }
        `
      },
      pattern: "url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='60' height='60' viewBox='0 0 60 60'%3E%3Cg fill-rule='evenodd'%3E%3Cg fill='%23FF69B4' fill-opacity='0.1'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")"
    },
    dark: {
      primary: '#FF1493',
      secondary: '#20B2AA',
      background: '#191970',
      text: '#FFFFFF',
      accent: '#FF69B4',
      hover: '#48D1CC',
      font: "'Quicksand', sans-serif",
      buttonGradient: 'linear-gradient(45deg, #FF1493, #20B2AA)',
      boxShadow: '0 0 10px #FF1493',
      animation: {
        name: 'popPulse',
        keyframes: `
          @keyframes popPulse {
            0% { box-shadow: 0 0 0 0 rgba(255, 105, 180, 0.4); }
            70% { box-shadow: 0 0 0 10px rgba(255, 105, 180, 0); }
            100% { box-shadow: 0 0 0 0 rgba(255, 105, 180, 0); }
          }
        `
      },
      pattern: "url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='60' height='60' viewBox='0 0 60 60'%3E%3Cg fill-rule='evenodd'%3E%3Cg fill='%23FF1493' fill-opacity='0.1'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")"
    }
  },
rock: {
  light: {
    primary: '#FF4500',
    secondary: '#1C1C1C',
    background: "#2F4F4F",
    text: '#FFFFFF',
    accent: '#FFA500',
    hover: '#FF6347',
    font: "'Montserrat', sans-serif",
    buttonGradient: 'linear-gradient(45deg, #FF4500, #1C1C1C)',
    boxShadow: '0 0 10px #FF4500',
    animation: {
      name: 'rockShake',
      keyframes: `
        @keyframes rockShake {
          0%, 100% { transform: translateX(0); }
          25% { transform: translateX(-5px); }
          75% { transform: translateX(5px); }
        }
      `
    },
    pattern: "url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M54.627 0l.83.828-1.415 1.415L51.8 0h2.827zM5.373 0l-.83.828L5.96 2.243 8.2 0H5.374zM48.97 0l3.657 3.657-1.414 1.414L46.143 0h2.828zM11.03 0L7.372 3.657 8.787 5.07 13.857 0H11.03zm32.284 0L49.8 6.485 48.384 7.9l-7.9-7.9h2.83zM16.686 0L10.2 6.485 11.616 7.9l7.9-7.9h-2.83zm20.97 0l9.315 9.314-1.414 1.414L34.828 0h2.83zM22.344 0L13.03 9.314l1.414 1.414L25.172 0h-2.83zM32 0l12.142 12.142-1.414 1.414L30 .828 17.272 13.556l-1.414-1.414L28 0h4zM.284 0l28 28-1.414 1.414L0 2.544V0h.284zM0 5.373l25.456 25.455-1.414 1.415L0 8.2V5.374zm0 5.656l22.627 22.627-1.414 1.414L0 13.86v-2.83zm0 5.656l19.8 19.8-1.415 1.413L0 19.514v-2.83zm0 5.657l16.97 16.97-1.414 1.415L0 25.172v-2.83zM0 28l14.142 14.142-1.414 1.414L0 30.828V28zm0 5.657L11.314 44.97 9.9 46.386l-9.9-9.9v-2.828zm0 5.657L8.485 47.8 7.07 49.212 0 42.143v-2.83zm0 5.657l5.657 5.657-1.414 1.415L0 47.8v-2.83zm0 5.657l2.828 2.83-1.414 1.413L0 53.456v-2.83zM54.627 60L30 35.373 5.373 60H8.2L30 38.2 51.8 60h2.827zm-5.656 0L30 41.03 11.03 60h2.828L30 43.858 46.142 60h2.83zm-5.656 0L30 46.686 16.686 60h2.83L30 49.515 40.485 60h2.83zm-5.657 0L30 52.343 22.344 60h2.83L30 55.172 34.828 60h2.83zM32 60l-2-2-2 2h4zM59.716 0l-28 28 1.414 1.414L60 2.544V0h-.284zM60 5.373L34.544 30.828l1.414 1.415L60 8.2V5.374zm0 5.656L37.373 33.656l1.414 1.414L60 13.86v-2.83zm0 5.656l-19.8 19.8 1.415 1.413L60 19.514v-2.83zm0 5.657l-16.97 16.97 1.414 1.415L60 25.172v-2.83zM60 28L45.858 42.142l1.414 1.414L60 30.828V28zm0 5.657L48.686 44.97l1.415 1.415 9.9-9.9v-2.828zm0 5.657L51.515 47.8l1.414 1.413 7.07-7.07v-2.83zm0 5.657l-5.657 5.657 1.414 1.415L60 47.8v-2.83zm0 5.657l-2.828 2.83 1.414 1.413L60 53.456v-2.83zM39.9 16.385l1.414-1.414L30 3.658 18.686 14.97l1.415 1.415 9.9-9.9 9.9 9.9zm-2.83 2.828l1.415-1.414L30 9.313 21.515 17.8l1.414 1.413 7.07-7.07 7.07 7.07zm-2.827 2.83l1.414-1.416L30 14.97l-5.657 5.657 1.414 1.415L30 17.8l4.243 4.242zm-2.83 2.827l1.415-1.414L30 20.626l-2.828 2.83 1.414 1.414L30 23.456l1.414 1.414zM56.87 59.414L58.284 58 30 29.716 1.716 58l1.414 1.414L30 32.544l26.87 26.87z' fill='%23FF4500' fill-opacity='0.1' fill-rule='evenodd'/%3E%3C/svg%3E\")"
  },
  dark: {
    primary: '#FF6347',
    secondary: '#2F4F4F',
    background: '#2C2C2C',
    text: '#FFFFFF',
    accent: '#FFA07A',
    hover: '#FF4500',
    font: "'Montserrat', sans-serif",
    buttonGradient: 'linear-gradient(45deg, #FF6347, #2F4F4F)',
    boxShadow: '0 0 10px #FF6347',
    animation: {
      name: 'rockFlash',
      keyframes: `
        @keyframes rockFlash {
          0%, 100% { opacity: 1; }
          50% { opacity: 0.5; }
        }
      `
    },
    pattern: "url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M54.627 0l.83.828-1.415 1.415L51.8 0h2.827zM5.373 0l-.83.828L5.96 2.243 8.2 0H5.374zM48.97 0l3.657 3.657-1.414 1.414L46.143 0h2.828zM11.03 0L7.372 3.657 8.787 5.07 13.857 0H11.03zm32.284 0L49.8 6.485 48.384 7.9l-7.9-7.9h2.83zM16.686 0L10.2 6.485 11.616 7.9l7.9-7.9h-2.83zm20.97 0l9.315 9.314-1.414 1.414L34.828 0h2.83zM22.344 0L13.03 9.314l1.414 1.414L25.172 0h-2.83zM32 0l12.142 12.142-1.414 1.414L30 .828 17.272 13.556l-1.414-1.414L28 0h4zM.284 0l28 28-1.414 1.414L0 2.544V0h.284zM0 5.373l25.456 25.455-1.414 1.415L0 8.2V5.374zm0 5.656l22.627 22.627-1.414 1.414L0 13.86v-2.83zm0 5.656l19.8 19.8-1.415 1.413L0 19.514v-2.83zm0 5.657l16.97 16.97-1.414 1.415L0 25.172v-2.83zM0 28l14.142 14.142-1.414 1.414L0 30.828V28zm0 5.657L11.314 44.97 9.9 46.386l-9.9-9.9v-2.828zm0 5.657L8.485 47.8 7.07 49.212 0 42.143v-2.83zm0 5.657l5.657 5.657-1.414 1.415L0 47.8v-2.83zm0 5.657l2.828 2.83-1.414 1.413L0 53.456v-2.83zM54.627 60L30 35.373 5.373 60H8.2L30 38.2 51.8 60h2.827zm-5.656 0L30 41.03 11.03 60h2.828L30 43.858 46.142 60h2.83zm-5.656 0L30 46.686 16.686 60h2.83L30 49.515 40.485 60h2.83zm-5.657 0L30 52.343 22.344 60h2.83L30 55.172 34.828 60h2.83zM32 60l-2-2-2 2h4zM59.716 0l-28 28 1.414 1.414L60 2.544V0h-.284zM60 5.373L34.544 30.828l1.414 1.415L60 8.2V5.374zm0 5.656L37.373 33.656l1.414 1.414L60 13.86v-2.83zm0 5.656l-19.8 19.8 1.415 1.413L60 19.514v-2.83zm0 5.657l-16.97 16.97 1.414 1.415L60 25.172v-2.83zM60 28L45.858 42.142l1.414 1.414L60 30.828V28zm0 5.657L48.686 44.97l1.415 1.415 9.9-9.9v-2.828zm0 5.657L51.515 47.8l1.414 1.413 7.07-7.07v-2.83zm0 5.657l-5.657 5.657 1.414 1.415L60 47.8v-2.83zm0 5.657l-2.828 2.83 1.414 1.413L60 53.456v-2.83zM39.9 16.385l1.414-1.414L30 3.658 18.686 14.97l1.415 1.415 9.9-9.9 9.9 9.9zm-2.83 2.828l1.415-1.414L30 9.313 21.515 17.8l1.414 1.413 7.07-7.07 7.07 7.07zm-2.827 2.83l1.414-1.416L30 14.97l-5.657 5.657 1.414 1.415L30 17.8l4.243 4.242zm-2.83 2.827l1.415-1.414L30 20.626l-2.828 2.83 1.414 1.414L30 23.456l1.414 1.414zM56.87 59.414L58.284 58 30 29.716 1.716 58l1.414 1.414L30 32.544l26.87 26.87z' fill='%23FF6347' fill-opacity='0.1' fill-rule='evenodd'/%3E%3C/svg%3E\")"
  }
},
electronic: {
  light: {
    primary: '#00FF00',
    secondary: '#FF00FF',
    background: '#1A1A1A',
    text: '#FFFFFF',
    accent: '#00FFFF',
    hover: '#FF00FF',
    font: "'Orbitron', sans-serif",
    buttonGradient: ' #00FF00',
    boxShadow: '0 0 15px #00FF00',
    animation: {
      name: 'neonPulse',
      keyframes: `
        @keyframes neonPulse {
          0%, 100% { box-shadow: 0 0 5px #00FF00, 0 0 10px #00FF00, 0 0 15px #00FF00, 0 0 20px #00FF00; }
          50% { box-shadow: 0 0 10px #00FF00, 0 0 20px #00FF00, 0 0 30px #00FF00, 0 0 40px #00FF00; }
        }
      `
    },
    pattern: "url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100'%3E%3Cg fill-rule='evenodd'%3E%3Cg fill='%2300FF00' fill-opacity='0.1'%3E%3Cpath opacity='.5' d='M96 95h4v1h-4v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9zm-1 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")"
  },
  dark: {
    primary: '#00FF00',
    secondary: '#FF00FF',
    background: '#0F0F0F',
    text: '#FFFFFF',
    accent: '#00FFFF',
    hover: '#FF00FF',
    font: "'Orbitron', sans-serif",
    buttonGradient: '#00FF00',
    boxShadow: '0 0 15px #00FF00',
    animation: {
      name: 'electroBeat',
      keyframes: `
        @keyframes electroBeat {
          0%, 100% { transform: scale(1); }
          50% { transform: scale(1.05); }
        }
      `
    },
    pattern: "url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100'%3E%3Cg fill-rule='evenodd'%3E%3Cg fill='%2300FF00' fill-opacity='0.1'%3E%3Cpath opacity='.5' d='M96 95h4v1h-4v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9zm-1 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")"
  }
},
hiphop: {
  light: {
    primary: '#FFD700',
    secondary: '#4B0082',
    background: '#F5F5F5',
    text: '#000000',
    accent: '#FF4500',
    hover: '#DAA520',
    font: "'Rubik', sans-serif",
    buttonGradient: 'linear-gradient(45deg, #FFD700, #4B0082)',
    boxShadow: '0 0 10px #FFD700',
    animation: {
      name: 'boomBox',
      keyframes: `
        @keyframes boomBox {
          0%, 100% { transform: translateY(0); }
          50% { transform: translateY(-5px); }
        }
      `
    },
    pattern: "url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23FFD700' fill-opacity='0.2'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")"
  },
  dark: {
    primary: '#FFD700',
    secondary: '#4B0082',
    background: '#1A1A1A',
    text: '#FFFFFF',
    accent: '#FF4500',
    hover: '#DAA520',
    font: "'Rubik', sans-serif",
    buttonGradient: 'linear-gradient(45deg, #FFD700, #4B0082)',
    boxShadow: '0 0 15px #FFD700',
    animation: {
      name: 'scratch',
      keyframes: `
        @keyframes scratch {
          0%, 100% { transform: translateX(0); }
          25% { transform: translateX(-5px); }
          75% { transform: translateX(5px); }
        }
      `
    },
    pattern: "url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23FFD700' fill-opacity='0.2'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")"
  }
},
jazz: {
  light: {
    primary: '#8B4513',
    secondary: '#DEB887',
    background: ' #F4A460',
    text: '#000000',
    accent: '#CD853F',
    hover: '#D2691E',
    font: "'Playfair Display', serif",
    buttonGradient: 'linear-gradient(45deg, #8B4513, #DEB887)',
    boxShadow: '0 0 10px rgba(139, 69, 19, 0.5)',
    animation: {
      name: 'smoothJazz',
      keyframes: `
        @keyframes smoothJazz {
          0%, 100% { transform: scale(1) rotate(0deg); }
          50% { transform: scale(1.05) rotate(2deg); }
        }
      `
    },
    pattern: "url(\"data:image/svg+xml,%3Csvg width='52' height='26' viewBox='0 0 52 26' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%238B4513' fill-opacity='0.1'%3E%3Cpath d='M10 10c0-2.21-1.79-4-4-4-3.314 0-6-2.686-6-6h2c0 2.21 1.79 4 4 4 3.314 0 6 2.686 6 6 0 2.21 1.79 4 4 4 3.314 0 6 2.686 6 6 0 2.21 1.79 4 4 4v2c-3.314 0-6-2.686-6-6 0-2.21-1.79-4-4-4-3.314 0-6-2.686-6-6zm25.464-1.95l8.486 8.486-1.414 1.414-8.486-8.486 1.414-1.414z' /%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")"
  },
  dark: {
    primary: '#CD853F',
    secondary: '#8B4513',
    background: ' #2F1E0E',
    text: '#FFDAB9',
    accent: '#DEB887',
    hover: '#D2691E',
    font: "'Playfair Display', serif",
    buttonGradient: 'linear-gradient(45deg, #CD853F, #8B4513)',
    boxShadow: '0 0 15px rgba(205, 133, 63, 0.5)',
    animation: {
      name: 'jazzImprov',
      keyframes: `
        @keyframes jazzImprov {
          0%, 100% { transform: translateY(0) rotate(0deg); }
          25% { transform: translateY(-5px) rotate(-2deg); }
          75% { transform: translateY(5px) rotate(2deg); }
        }
      `
    },
    pattern: "url(\"data:image/svg+xml,%3Csvg width='52' height='26' viewBox='0 0 52 26' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23CD853F' fill-opacity='0.1'%3E%3Cpath d='M10 10c0-2.21-1.79-4-4-4-3.314 0-6-2.686-6-6h2c0 2.21 1.79 4 4 4 3.314 0 6 2.686 6 6 0 2.21 1.79 4 4 4 3.314 0 6 2.686 6 6 0 2.21 1.79 4 4 4v2c-3.314 0-6-2.686-6-6 0-2.21-1.79-4-4-4-3.314 0-6-2.686-6-6zm25.464-1.95l8.486 8.486-1.414 1.414-8.486-8.486 1.414-1.414z' /%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")"
  }
},
classical: {
  light: {
    primary: '#B8860B',
    secondary: '#4169E1',
    background: '#FFFFF0',
    text: '#000000',
    accent: '#8B0000',
    hover: '#DAA520',
    font: "'Cormorant Garamond', serif",
    buttonGradient: 'linear-gradient(45deg, #B8860B, #4169E1)',
    boxShadow: '0 0 10px rgba(184, 134, 11, 0.5)',
    animation: {
      name: 'conductorWave',
      keyframes: `
        @keyframes conductorWave {
          0%, 100% { transform: rotate(0deg); }
          25% { transform: rotate(5deg); }
          75% { transform: rotate(-5deg); }
        }
      `
    },
    pattern: "url(\"data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='%23B8860B' fill-opacity='0.1' fill-rule='evenodd'/%3E%3C/svg%3E\")"
  },
  dark: {
    primary: '#DAA520',
    secondary: '#4169E1',
    background: ' #1C1C1C',
    text: '#F5F5DC',
    accent: '#8B0000',
    hover: '#B8860B',
    font: "'Cormorant Garamond', serif",
    buttonGradient: 'linear-gradient(45deg, #DAA520, #4169E1)',
    boxShadow: '0 0 15px rgba(218, 165, 32, 0.5)',
    animation: {
      name: 'orchestraRise',
      keyframes: `
        @keyframes orchestraRise {
          0%, 100% { transform: scaleY(1); }
          50% { transform: scaleY(1.05); }
        }
      `
    },
    pattern: "url(\"data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='%23DAA520' fill-opacity='0.1' fill-rule='evenodd'/%3E%3C/svg%3E\")"
  }
},
reggae: {
  light: {
    primary: '#009E49',
    secondary: '#FED100',
    background: '#E6F3FF',
    text: '#000000',
    accent: '#EE2737',
    hover: '#00C957',
    font: "'Kalam', cursive",
    buttonGradient: 'linear-gradient(45deg, #009E49, #FED100)',
    boxShadow: '0 0 10px rgba(0, 158, 73, 0.5)',
    animation: {
      name: 'reggaeVibe',
      keyframes: `
        @keyframes reggaeVibe {
          0%, 100% { transform: translateY(0); }
          50% { transform: translateY(-5px); }
        }
      `
    },
    pattern: "url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23009E49' fill-opacity='0.15'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")"
  },
  dark: {
    primary: '#00C957',
    secondary: '#FFD700',
    background: ' #2C2C2C',
    text: '#FFFFFF',
    accent: '#FF4500',
    hover: '#32CD32',
    font: "'Kalam', cursive",
    buttonGradient: 'linear-gradient(45deg, #00C957, #FFD700)',
    boxShadow: '0 0 15px rgba(0, 201, 87, 0.5)',
    animation: {
      name: 'reggaeGroove',
      keyframes: `
        @keyframes reggaeGroove {
          0%, 100% { transform: rotate(0deg); }
          25% { transform: rotate(-1deg); }
          75% { transform: rotate(1deg); }
        }
      `
    },
    pattern: "url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%2300C957' fill-opacity='0.15'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")"
  }
},
metal: {
  light: {
    primary: '#C0C0C0',
    secondary: '#8B0000',
    background: ' #D3D3D3',
    text: '#000000',
    accent: '#FF4500',
    hover: '#B8860B',
    font: "'Megrim', cursive",
    buttonGradient: 'linear-gradient(45deg, #C0C0C0, #8B0000)',
    boxShadow: '0 0 10px rgba(192, 192, 192, 0.7)',
    animation: {
      name: 'metalShine',
      keyframes: `
        @keyframes metalShine {
          0% { filter: brightness(100%); }
          50% { filter: brightness(150%); }
          100% { filter: brightness(100%); }
        }
      `
    },
    pattern: "url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23000000' fill-opacity='0.15'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")"
  },
  dark: {
    primary: '#1C1C1C',
    secondary: '#8B0000',
    background: ' #1A1A1A',
    text: '#FFFFFF',
    accent: '#FF4500',
    hover: '#C0C0C0',
    font: "'Megrim', cursive",
    buttonGradient: 'linear-gradient(45deg, #1C1C1C, #8B0000)',
    boxShadow: '0 0 15px rgba(139, 0, 0, 0.7)',
    animation: {
      name: 'metalBurn',
      keyframes: `
        @keyframes metalBurn {
          0%, 100% { box-shadow: 0 0 5px #FF4500; }
          50% { box-shadow: 0 0 20px #FF4500, 0 0 30px #8B0000; }
        }
      `
    },
    pattern: "url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23FFFFFF' fill-opacity='0.05'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")"
  }
},
punk: {
  light: {
    primary: '#FF1493',
    secondary: '#000000',
    background: ' #FFFFFF',
    text: '#000000',
    accent: '#00FF00',
    hover: '#FF4500',
    font: "'Anarchy', sans-serif",
    buttonGradient: 'linear-gradient(45deg, #FF1493, #000000)',
    boxShadow: '0 0 10px rgba(255, 20, 147, 0.7)',
    animation: {
      name: 'punkRock',
      keyframes: `
        @keyframes punkRock {
          0%, 100% { transform: rotate(0deg); }
          25% { transform: rotate(-3deg); }
          75% { transform: rotate(3deg); }
        }
      `
    },
    pattern: "url(\"data:image/svg+xml,%3Csvg width='40' height='40' viewBox='0 0 40 40' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23FF1493' fill-opacity='0.15' fill-rule='evenodd'%3E%3Cpath d='M0 40L40 0H20L0 20M40 40V20L20 40'/%3E%3C/g%3E%3C/svg%3E\")"
  },
  dark: {
    primary: '#FF1493',
    secondary: '#FFFFFF',
    background: '#1A1A1A',
    text: '#FFFFFF',
    accent: '#00FF00',
    hover: '#FF4500',
    font: "'Anarchy', sans-serif",
    buttonGradient: 'linear-gradient(45deg, #FF1493, #FFFFFF)',
    boxShadow: '0 0 15px rgba(255, 20, 147, 0.7)',
    animation: {
      name: 'punkAnarchy',
      keyframes: `
        @keyframes punkAnarchy {
          0%, 100% { transform: scale(1); }
          50% { transform: scale(1.05); }
        }
      `
    },
    pattern: "url(\"data:image/svg+xml,%3Csvg width='40' height='40' viewBox='0 0 40 40' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23FF1493' fill-opacity='0.15' fill-rule='evenodd'%3E%3Cpath d='M0 40L40 0H20L0 20M40 40V20L20 40'/%3E%3C/g%3E%3C/svg%3E\")"
  }
},
folk: {
  light: {
    primary: '#8B4513',
    secondary: '#6B8E23',
    background: ' #F0E68C',
    text: '#000000',
    accent: '#D2691E',
    hover: '#556B2F',
    font: "'Amatic SC', cursive",
    buttonGradient: 'linear-gradient(45deg, #8B4513, #6B8E23)',
    boxShadow: '0 0 10px rgba(139, 69, 19, 0.5)',
    animation: {
      name: 'folkStrumming',
      keyframes: `
        @keyframes folkStrumming {
          0%, 100% { transform: translateX(0); }
          25% { transform: translateX(-2px) rotate(-1deg); }
          75% { transform: translateX(2px) rotate(1deg); }
        }
      `
    },
    pattern: "url(\"data:image/svg+xml,%3Csvg width='52' height='26' viewBox='0 0 52 26' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%238B4513' fill-opacity='0.15'%3E%3Cpath d='M10 10c0-2.21-1.79-4-4-4-3.314 0-6-2.686-6-6h2c0 2.21 1.79 4 4 4 3.314 0 6 2.686 6 6 0 2.21 1.79 4 4 4 3.314 0 6 2.686 6 6 0 2.21 1.79 4 4 4v2c-3.314 0-6-2.686-6-6 0-2.21-1.79-4-4-4-3.314 0-6-2.686-6-6zm25.464-1.95l8.486 8.486-1.414 1.414-8.486-8.486 1.414-1.414z' /%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")"
  },
  dark: {
    primary: '#D2691E',
    secondary: '#556B2F',
    background: '#3C3C3C',
    text: '#F5DEB3',
    accent: '#8B4513',
    hover: '#6B8E23',
    font: "'Amatic SC', cursive",
    buttonGradient: 'linear-gradient(45deg, #D2691E, #556B2F)',
    boxShadow: '0 0 15px rgba(210, 105, 30, 0.5)',
    animation: {
      name: 'folkDance',
      keyframes: `
        @keyframes folkDance {
          0%, 100% { transform: translateY(0); }
          50% { transform: translateY(-5px); }
        }
      `
    },
    pattern: "url(\"data:image/svg+xml,%3Csvg width='52' height='26' viewBox='0 0 52 26' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23D2691E' fill-opacity='0.15'%3E%3Cpath d='M10 10c0-2.21-1.79-4-4-4-3.314 0-6-2.686-6-6h2c0 2.21 1.79 4 4 4 3.314 0 6 2.686 6 6 0 2.21 1.79 4 4 4 3.314 0 6 2.686 6 6 0 2.21 1.79 4 4 4v2c-3.314 0-6-2.686-6-6 0-2.21-1.79-4-4-4-3.314 0-6-2.686-6-6zm25.464-1.95l8.486 8.486-1.414 1.414-8.486-8.486 1.414-1.414z' /%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")"
  }
},
rnb: {
  light: {
    primary: '#9932CC',
    secondary: '#FF8C00',
    background: '#F8F8FF',
    text: '#000000',
    accent: '#4B0082',
    hover: '#DDA0DD',
    font: "'Poiret One', cursive",
    buttonGradient: 'linear-gradient(45deg, #9932CC, #FF8C00)',
    boxShadow: '0 0 10px rgba(153, 50, 204, 0.5)',
    animation: {
      name: 'rnbGroove',
      keyframes: `
        @keyframes rnbGroove {
          0%, 100% { transform: scale(1) rotate(0deg); }
          50% { transform: scale(1.05) rotate(1deg); }
        }
      `
    },
    pattern: "url(\"data:image/svg+xml,%3Csvg width='40' height='40' viewBox='0 0 40 40' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%239932CC' fill-opacity='0.1' fill-rule='evenodd'%3E%3Cpath d='M0 40L40 0H20L0 20M40 40V20L20 40'/%3E%3C/g%3E%3C/svg%3E\")"
  },
  dark: {
    primary: '#8A2BE2',
    secondary: '#FFA500',
    background: ' #4B0082',
    text: '#FFFFFF',
    accent: '#FF69B4',
    hover: '#9370DB',
    font: "'Poiret One', cursive",
    buttonGradient: 'linear-gradient(45deg, #8A2BE2, #FFA500)',
    boxShadow: '0 0 15px rgba(138, 43, 226, 0.5)',
    animation: {
      name: 'rnbSoulful',
      keyframes: `
        @keyframes rnbSoulful {
          0%, 100% { transform: translateY(0); }
          50% { transform: translateY(-5px); }
        }
      `
    },
    pattern: "url(\"data:image/svg+xml,%3Csvg width='40' height='40' viewBox='0 0 40 40' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%238A2BE2' fill-opacity='0.1' fill-rule='evenodd'%3E%3Cpath d='M0 40L40 0H20L0 20M40 40V20L20 40'/%3E%3C/g%3E%3C/svg%3E\")"
  }
},
disco: {
  light: {
    primary: '#FF69B4',
    secondary: '#FFD700',
    background: ' #F0F8FF',
    text: '#000000',
    accent: '#00CED1',
    hover: '#FF1493',
    font: "'Monoton', cursive",
    buttonGradient: 'linear-gradient(45deg, #FF69B4, #FFD700)',
    boxShadow: '0 0 10px rgba(255, 105, 180, 0.7)',
    animation: {
      name: 'discoFever',
      keyframes: `
        @keyframes discoFever {
          0%, 100% { transform: scale(1) rotate(0deg); }
          25% { transform: scale(1.05) rotate(-5deg); }
          75% { transform: scale(1.05) rotate(5deg); }
        }
      `
    },
    pattern: "url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23FF69B4' fill-opacity='0.2'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")"
  },
  dark: {
    primary: '#FF1493',
    secondary: '#FFD700',
    background: ' #4B0082',
    text: '#FFFFFF',
    accent: '#00FFFF',
    hover: '#FF69B4',
    font: "'Monoton', cursive",
    buttonGradient: 'linear-gradient(45deg, #FF1493, #FFD700)',
    boxShadow: '0 0 15px rgba(255, 20, 147, 0.7)',
    animation: {
      name: 'discoNights',
      keyframes: `
        @keyframes discoNights {
          0%, 100% { box-shadow: 0 0 5px #FF1493, 0 0 10px #FFD700, 0 0 15px #00FFFF; }
          50% { box-shadow: 0 0 10px #FF1493, 0 0 20px #FFD700, 0 0 30px #00FFFF; }
        }
      `
    },
    pattern: "url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23FF1493' fill-opacity='0.2'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")"
  }
},
techno: {
  light: {
    primary: '#00FFFF',
    secondary: '#FF00FF',
    background: ' #E0E0E0',
    text: '#000000',
    accent: '#00FF00',
    hover: '#0000FF',
    font: "'Orbitron', sans-serif",
    buttonGradient: 'linear-gradient(45deg, #00FFFF, #FF00FF)',
    boxShadow: '0 0 10px rgba(0, 255, 255, 0.7)',
    animation: {
      name: 'technoBeats',
      keyframes: `
        @keyframes technoBeats {
          0%, 100% { transform: scale(1); }
          50% { transform: scale(1.05); }
        }
      `
    },
    pattern: "url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%2300FFFF' fill-opacity='0.2'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")"
  },
  dark: {
    primary: '#00FFFF',
    secondary: '#FF00FF',
    background: ' #000000',
    text: '#FFFFFF',
    accent: '#00FF00',
    hover: '#0000FF',
    font: "'Orbitron', sans-serif",
    buttonGradient: 'linear-gradient(45deg, #00FFFF, #FF00FF)',
    boxShadow: '0 0 15px rgba(0, 255, 255, 0.7)',
    animation: {
      name: 'technoPulse',
      keyframes: `
        @keyframes technoPulse {
          0%, 100% { box-shadow: 0 0 5px #00FFFF, 0 0 10px #FF00FF; }
          50% { box-shadow: 0 0 20px #00FFFF, 0 0 30px #FF00FF; }
        }
      `
    },
    pattern: "url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%2300FFFF' fill-opacity='0.2'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")"
  }
},
indie: {
  light: {
    primary: '#FF6347',
    secondary: '#48D1CC',
    background: ' #F5F5F5',
    text: '#333333',
    accent: '#FFA07A',
    hover: '#20B2AA',
    font: "'Courier Prime', monospace",
    buttonGradient: 'linear-gradient(45deg, #FF6347, #48D1CC)',
    boxShadow: '0 0 10px rgba(255, 99, 71, 0.5)',
    animation: {
      name: 'indieVinylSpin',
      keyframes: `
        @keyframes indieVinylSpin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
      `
    },
    pattern: "url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23FF6347' fill-opacity='0.1'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")"
  },
  dark: {
    primary: '#FF6347',
    secondary: '#48D1CC',
    background: ' #34495E',
    text: '#FFFFFF',
    accent: '#FFA07A',
    hover: '#20B2AA',
    font: "'Courier Prime', monospace",
    buttonGradient: 'linear-gradient(45deg, #FF6347, #48D1CC)',
    boxShadow: '0 0 15px rgba(255, 99, 71, 0.5)',
    animation: {
      name: 'indieGuitarStrum',
      keyframes: `
        @keyframes indieGuitarStrum {
          0%, 100% { transform: translateX(0); }
          50% { transform: translateX(5px); }
        }
      `
    },
    pattern: "url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23FF6347' fill-opacity='0.1'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")"
  }
},
grunge: {
  light: {
    primary: '#8B0000',
    secondary: '#2F4F4F',
    background: ' #A9A9A9',
    text: '#000000',
    accent: '#CD5C5C',
    hover: '#556B2F',
    font: "'Grunge', sans-serif",
    buttonGradient: 'linear-gradient(45deg, #8B0000, #2F4F4F)',
    boxShadow: '0 0 10px rgba(139, 0, 0, 0.5)',
    animation: {
      name: 'grungeDistortion',
      keyframes: `
        @keyframes grungeDistortion {
          0%, 100% { transform: skew(0deg); }
          25% { transform: skew(2deg); }
          75% { transform: skew(-2deg); }
        }
      `
    },
    pattern: "url(\"data:image/svg+xml,%3Csvg width='40' height='40' viewBox='0 0 40 40' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%238B0000' fill-opacity='0.1' fill-rule='evenodd'%3E%3Cpath d='M0 40L40 0H20L0 20M40 40V20L20 40'/%3E%3C/g%3E%3C/svg%3E\")"
  },
  dark: {
    primary: '#8B0000',
    secondary: '#2F4F4F',
    background: '#1C1C1C',
    text: '#D3D3D3',
    accent: '#CD5C5C',
    hover: '#556B2F',
    font: "'Grunge', sans-serif",
    buttonGradient: 'linear-gradient(45deg, #8B0000, #2F4F4F)',
    boxShadow: '0 0 15px rgba(139, 0, 0, 0.5)',
    animation: {
      name: 'grungeFeedback',
      keyframes: `
        @keyframes grungeFeedback {
          0%, 100% { opacity: 1; }
          50% { opacity: 0.8; }
        }
      `
    },
    pattern: "url(\"data:image/svg+xml,%3Csvg width='40' height='40' viewBox='0 0 40 40' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%238B0000' fill-opacity='0.1' fill-rule='evenodd'%3E%3Cpath d='M0 40L40 0H20L0 20M40 40V20L20 40'/%3E%3C/g%3E%3C/svg%3E\")"
  }
},
synthwave: {
  light: {
    primary: '#FF1493',
    secondary: '#00FFFF',
    background: '#FF6AD5',
    text: '#FFFFFF',
    accent: '#FFA500',
    hover: '#FF00FF',
    font: "'Outrun future', sans-serif",
    buttonGradient: 'linear-gradient(45deg, #FF1493, #00FFFF)',
    boxShadow: '0 0 10px rgba(255, 20, 147, 0.7)',
    animation: {
      name: 'synthwaveGlow',
      keyframes: `
        @keyframes synthwaveGlow {
          0%, 100% { text-shadow: 0 0 5px #FF1493, 0 0 10px #FF1493; }
          50% { text-shadow: 0 0 20px #FF1493, 0 0 30px #00FFFF; }
        }
      `
    },
    pattern: "url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23FF1493' fill-opacity='0.3'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")"
  },
  dark: {
    primary: '#FF1493',
    secondary: '#00FFFF',
    background: ' #4B0082',
    text: '#FFFFFF',
    accent: '#FFA500',
    hover: '#FF00FF',
    font: "'Outrun future', sans-serif",
    buttonGradient: 'linear-gradient(45deg, #FF1493, #00FFFF)',
    boxShadow: '0 0 15px rgba(255, 20, 147, 0.7)',
    animation: {
      name: 'synthwavePulse',
      keyframes: `
        @keyframes synthwavePulse {
          0%, 100% { transform: scale(1); }
          50% { transform: scale(1.05); }
        }
      `
    },
    pattern: "url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23FF1493' fill-opacity='0.3'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")"
  }
},
lofi: {
  light: {
    primary: '#20B2AA',
    secondary: '#FFA07A',
    background: '#F0F8FF',
    text: '#4A4A4A',
    accent: '#DDA0DD',
    hover: '#5F9EA0',
    font: "'IBM Plex Mono', monospace",
    buttonGradient: 'linear-gradient(45deg, #20B2AA, #FFA07A)',
    boxShadow: '0 0 10px rgba(32, 178, 170, 0.3)',
    animation: {
      name: 'lofiWave',
      keyframes: `
        @keyframes lofiWave {
          0%, 100% { transform: translateY(0); }
          50% { transform: translateY(-5px); }
        }
      `
    },
    pattern: "url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%2320B2AA' fill-opacity='0.1'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")"
  },
  dark: {
    primary: '#20B2AA',
    secondary: '#FFA07A',
    background: ' #34495E',
    text: '#E0E0E0',
    accent: '#DDA0DD',
    hover: '#5F9EA0',
    font: "'IBM Plex Mono', monospace",
    buttonGradient: 'linear-gradient(45deg, #20B2AA, #FFA07A)',
    boxShadow: '0 0 15px rgba(32, 178, 170, 0.3)',
    animation: {
      name: 'lofiVinyl',
      keyframes: `
        @keyframes lofiVinyl {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
      `
    },
    pattern: "url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%2320B2AA' fill-opacity='0.1'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")"
  }
}
};

import React from 'react';

function Sorting({ sortCriteria, setSortCriteria, sortOrder, setSortOrder }) {
  return (
    <div className="sorting-controls">
      <select 
        value={sortCriteria} 
        onChange={(e) => setSortCriteria(e.target.value)}
        className="sort-select"
      >
        <option value="name">Título</option>
        <option value="artists">Artista</option>
        <option value="album">Álbum</option>
      </select>
      <button 
        onClick={() => setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')}
        className="sort-order-btn"
      >
        {sortOrder === 'asc' ? '↑' : '↓'}
      </button>
    </div>
  );
}

export default Sorting;import React from 'react';

function SongItem({ song }) {
  return (
    <li className="song-item">
      <div className="song-info">
        <h3>{song.title}</h3>
        <p>{song.artist}</p>
      </div>
      <span className="song-genre">{song.genre}</span>
      <button className="request-button">Solicitar</button>
    </li>
  );
}

export default SongItem;import React, { useState } from 'react';
import { motion } from 'framer-motion';

function Register({ onRegisterSuccess, onBackToApp }) {
  const [formData, setFormData] = useState({
    nombre: '',
    sexo: '',
    edad: '',
    email: '',
    contraseña: '',
    nombre_de_usuario: ''
  });
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevState => ({
      ...prevState,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setIsLoading(true);
    try {
      const response = await fetch('/api/registro', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      if (response.ok) {
        const data = await response.json();
        console.log('Usuario registrado con éxito:', data);
        onRegisterSuccess(data);
      } else {
        const errorData = await response.json();
        setError(errorData.message || 'Error en el registro. Por favor, intente de nuevo.');
      }
    } catch (error) {
      console.error('Error al enviar la solicitud:', error);
      setError('Error de conexión. Por favor, intente de nuevo más tarde.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      transition={{ duration: 0.5 }}
      className="auth-container"
    >
      <button onClick={onBackToApp} className="back-to-app-btn">Volver</button>
      <div className="auth-form">
        <div className="auth-content">
          <h2>Registro</h2>
          <form onSubmit={handleSubmit}>
            <div className="input-group">
              <input
                type="text"
                name="nombre"
                value={formData.nombre}
                onChange={handleChange}
                required
                placeholder=" "
              />
              <label>Nombre</label>
            </div>
            <div className="input-group">
  <select
    name="sexo"
    value={formData.sexo}
    onChange={handleChange}
    required
  >
    <option value="" disabled>Seleccione sexo</option>
    <option value="Hombre">Hombre</option>
    <option value="Mujer">Mujer</option>
    <option value="Otro">Otro</option>
  </select>
</div>
            <div className="input-group">
              <input
                type="number"
                name="edad"
                value={formData.edad}
                onChange={handleChange}
                required
                placeholder=" "
              />
              <label>Edad</label>
            </div>
            <div className="input-group">
              <input
                type="email"
                name="email"
                value={formData.email}
                onChange={handleChange}
                required
                placeholder=" "
              />
              <label>Email</label>
            </div>
            <div className="input-group">
              <input
                type="password"
                name="contraseña"
                value={formData.contraseña}
                onChange={handleChange}
                required
                placeholder=" "
              />
              <label>Contraseña</label>
            </div>
            <div className="input-group">
              <input
                type="text"
                name="nombre_de_usuario"
                value={formData.nombre_de_usuario}
                onChange={handleChange}
                required
                placeholder=" "
              />
              <label>Nombre de Usuario</label>
            </div>
            {error && <p className="error-message">{error}</p>}
            <button type="submit" disabled={isLoading}>
              {isLoading ? 'Registrando...' : 'Registrarse'}
            </button>
          </form>
        </div>
      </div>
    </motion.div>
  );
}

export default Register;import React, { useEffect, useState, useCallback } from 'react';

const TechnoLines = () => {
  const [lines, setLines] = useState([]);
  const [beat, setBeat] = useState(0);

  const createLine = useCallback(() => ({
    left: `${Math.random() * 100}%`,
    width: `${Math.random() * 3 + 1}px`,
    height: `${Math.random() * 30 + 10}%`,
    animationDuration: `${Math.random() * 3 + 5}s`,
    animationDelay: `${Math.random() * 2}s`,
    opacity: Math.random() * 0.5 + 0.5
  }), []);

  useEffect(() => {
    const createLines = () => {
      const newLines = Array(15).fill().map(createLine);
      setLines(newLines);
    };

    createLines();
    const lineInterval = setInterval(createLines, 8000);

    // Simular un beat
    const beatInterval = setInterval(() => {
      setBeat((prevBeat) => (prevBeat + 1) % 4);
    }, 500); // 120 BPM

    return () => {
      clearInterval(lineInterval);
      clearInterval(beatInterval);
    };
  }, [createLine]);

  return (
    <div className="techno-lines">
      {lines.map((line, index) => (
        <div
          key={index}
          className={`techno-line ${beat === 0 ? 'pulse' : ''}`}
          style={{
            left: line.left,
            width: line.width,
            height: line.height,
            animationDuration: line.animationDuration,
            animationDelay: line.animationDelay,
            opacity: line.opacity,
            transform: `scaleY(${1 + beat * 0.1})`
          }}
        />
      ))}
    </div>
  );
};

export default TechnoLines;import React, { useRef, useEffect, useState } from 'react';

const AudioVisualizer = () => {
  const canvasRef = useRef(null);
  const [theme, setTheme] = useState({
    primary: '#39FF14',
    secondary: '#00FFFF',
    background: '#000000'
  });

  useEffect(() => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    let animationFrameId;

    const resizeCanvas = () => {
      canvas.width = window.innerWidth;
      canvas.height = 100;
    };

    const drawVisualizer = (timestamp) => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.fillStyle = theme.background;
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      const particleCount = 50;
      const radius = 2;
      const lineThreshold = 50;

      // Theme-specific parameters
      const speedMultiplier = getSpeedMultiplier(theme.primary);
      const amplitudeMultiplier = getAmplitudeMultiplier(theme.primary);

      for (let i = 0; i < particleCount; i++) {
        const x = Math.sin(timestamp / 2000 * speedMultiplier + i) * canvas.width / 2 * amplitudeMultiplier + canvas.width / 2;
        const y = Math.cos(timestamp / 1500 * speedMultiplier + i) * canvas.height / 2 * amplitudeMultiplier + canvas.height / 2;

        ctx.beginPath();
        ctx.arc(x, y, radius, 0, Math.PI * 2);
        ctx.fillStyle = i % 2 === 0 ? theme.primary : theme.secondary;
        ctx.fill();

        for (let j = i + 1; j < particleCount; j++) {
          const x2 = Math.sin(timestamp / 2000 * speedMultiplier + j) * canvas.width / 2 * amplitudeMultiplier + canvas.width / 2;
          const y2 = Math.cos(timestamp / 1500 * speedMultiplier + j) * canvas.height / 2 * amplitudeMultiplier + canvas.height / 2;

          const distance = Math.sqrt(Math.pow(x - x2, 2) + Math.pow(y - y2, 2));

          if (distance < lineThreshold) {
            ctx.beginPath();
            ctx.moveTo(x, y);
            ctx.lineTo(x2, y2);
            ctx.strokeStyle = `rgba(${parseInt(theme.primary.slice(1, 3), 16)}, ${parseInt(theme.primary.slice(3, 5), 16)}, ${parseInt(theme.primary.slice(5, 7), 16)}, ${1 - distance / lineThreshold})`;
            ctx.stroke();
          }
        }
      }

      animationFrameId = requestAnimationFrame(drawVisualizer);
    };

    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);
    drawVisualizer();

    return () => {
      window.removeEventListener('resize', resizeCanvas);
      cancelAnimationFrame(animationFrameId);
    };
  }, [theme]);

  useEffect(() => {
    const updateThemeColors = () => {
      setTheme({
        primary: getComputedStyle(document.documentElement).getPropertyValue('--primary').trim(),
        secondary: getComputedStyle(document.documentElement).getPropertyValue('--secondary').trim(),
        background: getComputedStyle(document.documentElement).getPropertyValue('--background').trim()
      });
    };

    updateThemeColors();
    window.addEventListener('themechange', updateThemeColors);

    return () => {
      window.removeEventListener('themechange', updateThemeColors);
    };
  }, []);

  return <canvas ref={canvasRef} className="audio-visualizer" />;
};

// Helper functions to determine theme-specific parameters
const getSpeedMultiplier = (primaryColor) => {
  // Convert primary color to HSL and use the hue to determine speed
  const hsl = hexToHSL(primaryColor);
  return 0.5 + (hsl.h / 360) * 1.5; // Speed range: 0.5 to 2
};

const getAmplitudeMultiplier = (primaryColor) => {
  // Use the lightness of the primary color to determine amplitude
  const hsl = hexToHSL(primaryColor);
  return 0.7 + (hsl.l / 100) * 0.6; // Amplitude range: 0.7 to 1.3
};

// Helper function to convert hex to HSL
const hexToHSL = (hex) => {
  let r = parseInt(hex.slice(1, 3), 16) / 255;
  let g = parseInt(hex.slice(3, 5), 16) / 255;
  let b = parseInt(hex.slice(5, 7), 16) / 255;

  let max = Math.max(r, g, b), min = Math.min(r, g, b);
  let h, s, l = (max + min) / 2;

  if (max === min) {
    h = s = 0; // achromatic
  } else {
    let d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    switch (max) {
      case r: h = (g - b) / d + (g < b ? 6 : 0); break;
      case g: h = (b - r) / d + 2; break;
      case b: h = (r - g) / d + 4; break;
      default: h = 0;
    }
    h /= 6;
  }

  return { h: h * 360, s: s * 100, l: l * 100 };
};

export default AudioVisualizer;import React, { useState } from 'react';
import './SearchBar.css';

const SearchBar = ({ setSearchTerm }) => {
  const [localSearchTerm, setLocalSearchTerm] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    if (localSearchTerm.trim()) {
      setSearchTerm(localSearchTerm);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="search-bar-container">
      <input
        type="text"
        value={localSearchTerm}
        onChange={(e) => setLocalSearchTerm(e.target.value)}
        placeholder="Buscar canciones..."
        className="search-input"
      />
      <button type="submit" className="search-button">
        Buscar
      </button>
    </form>
  );
};

export default SearchBar;import React from 'react';

const RequestQueue = ({ queue }) => {
  return (
    <div className="request-queue">
      <h2>Cola de Solicitudes</h2>
      {queue.length === 0 ? (
        <p>No hay solicitudes en la cola</p>
      ) : (
        <ul>
          {queue.map((request, index) => (
            <li key={request.id} className="queue-item">
              <span className="queue-position">{index + 1}</span>
              <span className="queue-song">{request.songTitle}</span>
              <span className="queue-artist">{request.artistName}</span>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
};

export default RequestQueue;import React from 'react';

function LoadingIndicator() {
  return (
    <div className="loading-indicator">
      <div className="spinner"></div>
      <p>Cargando canciones...</p>
    </div>
  );
}

export default LoadingIndicator;import React from 'react';
import './SongList.css';

const SongList = ({ songs, onPlaySong, onSuggestSong }) => {
  console.log('Songs received in SongList:', songs);

  const handleImageError = (event) => {
    event.target.src = '/path/to/fallback/image.jpg'; // Reemplaza con la ruta a tu imagen de respaldo
  };

  const openInSpotify = (song) => {
    if (song.uri) {
      window.open(`https://open.spotify.com/track/${song.uri.split(':')[2]}`, '_blank');
    } else if (song.id) {
      window.open(`https://open.spotify.com/track/${song.id}`, '_blank');
    } else {
      console.error('No se pudo abrir la canción en Spotify: falta URI o ID');
    }
  };

  if (!songs || songs.length === 0) {
    return <p className="no-songs-message">No se encontraron canciones. Prueba con otra búsqueda.</p>;
  }

  return (
    <ul className="song-list">
      {songs.map((song) => (
        <li key={song.id} className="song-item">
          <div className="song-image-container">
            {song.album_image && (
              <img 
                src={song.album_image} 
                alt={`${song.album} album cover`} 
                className="album-cover"
                onError={handleImageError}
              />
            )}
          </div>
          <div className="song-info">
            <h3 className="song-name">{song.name}</h3>
            <p className="song-artist">{song.artists}</p>
            <p className="song-album">{song.album}</p>
          </div>
          <div className="song-actions">
            <button 
              onClick={() => onPlaySong(song)} 
              className={`play-button ${!song.preview_url ? 'disabled' : ''}`}
              disabled={!song.preview_url}
              title={song.preview_url ? 'Reproducir previsualización' : 'Previsualización no disponible'}
            >
              ▶
            </button>
            <button 
              onClick={() => openInSpotify(song)} 
              className="open-spotify-button"
              title="Abrir en Spotify"
            >
              Abrir en Spotify
            </button>
            <button 
              onClick={() => onSuggestSong(song)} 
              className="suggest-song-button"
              title="Sugerir al DJ"
            >
              Sugerir al DJ
            </button>
          </div>
        </li>
      ))}
    </ul>
  );
};

export default SongList;import React, { useState, useEffect } from 'react';

const InternetConnectionCheck = () => {
  const [isOnline, setIsOnline] = useState(navigator.onLine);

  useEffect(() => {
    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  if (isOnline) return null;

  return (
    <div style={{ backgroundColor: 'red', color: 'white', padding: '10px', textAlign: 'center' }}>
      No hay conexión a Internet. Algunas funciones pueden no estar disponibles.
    </div>
  );
};

export default InternetConnectionCheck;import React, { useRef, useState, useEffect } from 'react';
import { Play, Pause, SkipBack, SkipForward, Volume2, VolumeX } from 'lucide-react';


const AudioPlayer = ({ audioSrc, songTitle, artistName, albumCover, isPlaying, setIsPlaying, onClose, primaryColor, secondaryColor }) =>  {
  const audioRef = useRef(null);
  const [currentTime, setCurrentTime] = useState(0);
  const [duration, setDuration] = useState(0);
  const [volume, setVolume] = useState(1);
  const [isMuted, setIsMuted] = useState(false);

  useEffect(() => {
    const audio = audioRef.current;
    if (audio) {
      const handleTimeUpdate = () => setCurrentTime(audio.currentTime);
      const handleLoadedMetadata = () => setDuration(audio.duration);
      const handleEnded = () => {
        setIsPlaying(false);
        setCurrentTime(0);
      };

      audio.addEventListener('timeupdate', handleTimeUpdate);
      audio.addEventListener('loadedmetadata', handleLoadedMetadata);
      audio.addEventListener('ended', handleEnded);

      return () => {
        audio.removeEventListener('timeupdate', handleTimeUpdate);
        audio.removeEventListener('loadedmetadata', handleLoadedMetadata);
        audio.removeEventListener('ended', handleEnded);
      };
    }
  }, [setIsPlaying]);

  useEffect(() => {
    if (audioRef.current && audioSrc) {
      audioRef.current.src = audioSrc;
      if (isPlaying) {
        audioRef.current.play().catch(e => console.error("Error playing audio:", e));
      }
      setCurrentTime(0);
    }
  }, [audioSrc, isPlaying]);

  const togglePlay = () => {
    if (audioRef.current) {
      if (isPlaying) {
        audioRef.current.pause();
      } else {
        audioRef.current.play().catch(e => console.error("Error playing audio:", e));
      }
      setIsPlaying(!isPlaying);
    }
  };

  const handleSeek = (e) => {
    const time = Number(e.target.value);
    if (audioRef.current) {
      audioRef.current.currentTime = time;
      setCurrentTime(time);
    }
  };

  const handleVolumeChange = (e) => {
    const newVolume = Number(e.target.value);
    setVolume(newVolume);
    if (audioRef.current) {
      audioRef.current.volume = newVolume;
    }
    if (newVolume > 0) {
      setIsMuted(false);
    }
  };

  const toggleMute = () => {
    if (audioRef.current) {
      audioRef.current.muted = !isMuted;
      setIsMuted(!isMuted);
    }
  };

  const formatTime = (time) => {
    const minutes = Math.floor(time / 60);
    const seconds = Math.floor(time % 60);
    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
  };

  if (!audioSrc) {
    return null;
  }

  return (
    <div className="audio-player-futuristic" style={{
      '--player-primary': primaryColor,
      '--player-secondary': secondaryColor,
      
    }}>
      <div className="holographic-display">
        <div className="song-info-hologram">
          <h3>{songTitle}</h3>
          <p>{artistName}</p>
        </div>
        <div className="visualizer">
          {[...Array(20)].map((_, i) => (
            <div 
              key={i} 
              className="visualizer-bar"
              style={{
                height: `${Math.random() * 100}%`,
                animationDelay: `${i * 0.1}s`
              }}
            />
          ))}
        </div>
      </div>
      <div className="controls-panel">
        <button onClick={() => audioRef.current.currentTime -= 10} className="control-button">
          <SkipBack />
        </button>
        <button onClick={togglePlay} className="play-pause-button">
          {isPlaying ? <Pause /> : <Play />}
        </button>
        <button onClick={() => audioRef.current.currentTime += 10} className="control-button">
          <SkipForward />
        </button>
      </div>
      <div className="progress-container">
        <span>{formatTime(currentTime)}</span>
        <input
          type="range"
          min="0"
          max={duration}
          value={currentTime}
          onChange={handleSeek}
          className="progress-slider"
        />
        <span>{formatTime(duration)}</span>
      </div>
      <div className="volume-container">
        <button onClick={toggleMute} className="volume-button">
          {isMuted ? <VolumeX /> : <Volume2 />}
        </button>
        <input
          type="range"
          min="0"
          max="1"
          step="0.01"
          value={isMuted ? 0 : volume}
          onChange={handleVolumeChange}
          className="volume-slider"
        />
      </div>
      <div className="hologram-effect"></div>
      <button onClick={onClose} className="close-button">X</button>
      <audio ref={audioRef} />
    </div>
  );
};

export default AudioPlayer;
import React, { useState, useEffect, useCallback } from 'react';

const PartyMode = ({ isActive }) => {
  const [gridLines, setGridLines] = useState([]);
  const [pulses, setPulses] = useState([]);
  const [glitches, setGlitches] = useState([]);
  const [waveforms, setWaveforms] = useState([]);

  const colors = ['#00FFFF', '#39FF14', '#00FF00', '#0000FF'];

  const createGridLine = useCallback(() => {
    const newLine = {
      id: Date.now(),
      isHorizontal: Math.random() > 0.5,
      position: `${Math.random() * 100}%`,
      color: colors[Math.floor(Math.random() * colors.length)],
    };
    setGridLines(prev => [...prev, newLine]);
    setTimeout(() => {
      setGridLines(prev => prev.filter(line => line.id !== newLine.id));
    }, 2000);
  }, []);

  const createPulse = useCallback(() => {
    const newPulse = {
      id: Date.now(),
      x: Math.random() * 100,
      y: Math.random() * 100,
      size: Math.random() * 100 + 50,
      color: colors[Math.floor(Math.random() * colors.length)],
    };
    setPulses(prev => [...prev, newPulse]);
    setTimeout(() => {
      setPulses(prev => prev.filter(pulse => pulse.id !== newPulse.id));
    }, 1000);
  }, []);

  const createGlitch = useCallback(() => {
    const newGlitch = {
      id: Date.now(),
      top: `${Math.random() * 100}%`,
      left: `${Math.random() * 100}%`,
      width: `${Math.random() * 20 + 10}%`,
      height: `${Math.random() * 5 + 2}px`,
      color: colors[Math.floor(Math.random() * colors.length)],
    };
    setGlitches(prev => [...prev, newGlitch]);
    setTimeout(() => {
      setGlitches(prev => prev.filter(glitch => glitch.id !== newGlitch.id));
    }, 150);
  }, []);

  const createWaveform = useCallback(() => {
    const newWaveform = {
      id: Date.now(),
      bottom: `${Math.random() * 20}%`,
      color: colors[Math.floor(Math.random() * colors.length)],
    };
    setWaveforms(prev => [...prev, newWaveform]);
    setTimeout(() => {
      setWaveforms(prev => prev.filter(wave => wave.id !== newWaveform.id));
    }, 3000);
  }, []);

  useEffect(() => {
    if (!isActive) return;

    const gridInterval = setInterval(createGridLine, 200);
    const pulseInterval = setInterval(createPulse, 500);
    const glitchInterval = setInterval(createGlitch, 100);
    const waveformInterval = setInterval(createWaveform, 1000);

    return () => {
      clearInterval(gridInterval);
      clearInterval(pulseInterval);
      clearInterval(glitchInterval);
      clearInterval(waveformInterval);
    };
  }, [isActive, createGridLine, createPulse, createGlitch, createWaveform]);

  if (!isActive) return null;

  return (
    <div className="party-mode techno">
      {gridLines.map(line => (
        <div
          key={line.id}
          className={`grid-line ${line.isHorizontal ? 'horizontal' : 'vertical'}`}
          style={{
            [line.isHorizontal ? 'top' : 'left']: line.position,
            backgroundColor: line.color,
          }}
        />
      ))}
      {pulses.map(pulse => (
        <div
          key={pulse.id}
          className="pulse"
          style={{
            left: `${pulse.x}%`,
            top: `${pulse.y}%`,
            width: `${pulse.size}px`,
            height: `${pulse.size}px`,
            borderColor: pulse.color,
          }}
        />
      ))}
      {glitches.map(glitch => (
        <div
          key={glitch.id}
          className="glitch"
          style={{
            top: glitch.top,
            left: glitch.left,
            width: glitch.width,
            height: glitch.height,
            backgroundColor: glitch.color,
          }}
        />
      ))}
      {waveforms.map(wave => (
        <div
          key={wave.id}
          className="waveform"
          style={{
            bottom: wave.bottom,
            backgroundColor: wave.color,
          }}
        />
      ))}
    </div>
  );
};

export default PartyMode;import React from 'react';

const Pagination = ({ currentPage, totalPages, onPageChange }) => {
  const pageNumbers = [];

  for (let i = 1; i <= totalPages; i++) {
    pageNumbers.push(i);
  }

  return (
    <nav>
      <ul className='pagination'>
        {pageNumbers.map(number => (
          <li key={number} className={`page-item ${currentPage === number ? 'active' : ''}`}>
            <button
              onClick={() => onPageChange(number)}
              className='page-link'
              disabled={currentPage === number}
            >
              {number}
            </button>
          </li>
        ))}
      </ul>
    </nav>
  );
};

export default Pagination;import React from 'react';
import styled, { keyframes } from 'styled-components';

const glitch = keyframes`
  0% {
    text-shadow: 0.05em 0 0 rgba(255, 0, 0, 0.75),
                -0.05em -0.025em 0 rgba(0, 255, 0, 0.75),
                -0.025em 0.05em 0 rgba(0, 0, 255, 0.75);
  }
  14% {
    text-shadow: 0.05em 0 0 rgba(255, 0, 0, 0.75),
                -0.05em -0.025em 0 rgba(0, 255, 0, 0.75),
                -0.025em 0.05em 0 rgba(0, 0, 255, 0.75);
  }
  15% {
    text-shadow: -0.05em -0.025em 0 rgba(255, 0, 0, 0.75),
                 0.025em 0.025em 0 rgba(0, 255, 0, 0.75),
                 -0.05em -0.05em 0 rgba(0, 0, 255, 0.75);
  }
  49% {
    text-shadow: -0.05em -0.025em 0 rgba(255, 0, 0, 0.75),
                 0.025em 0.025em 0 rgba(0, 255, 0, 0.75),
                 -0.05em -0.05em 0 rgba(0, 0, 255, 0.75);
  }
  50% {
    text-shadow: 0.025em 0.05em 0 rgba(255, 0, 0, 0.75),
                 0.05em 0 0 rgba(0, 255, 0, 0.75),
                 0 -0.05em 0 rgba(0, 0, 255, 0.75);
  }
  99% {
    text-shadow: 0.025em 0.05em 0 rgba(255, 0, 0, 0.75),
                 0.05em 0 0 rgba(0, 255, 0, 0.75),
                 0 -0.05em 0 rgba(0, 0, 255, 0.75);
  }
  100% {
    text-shadow: -0.025em 0 0 rgba(255, 0, 0, 0.75),
                -0.025em -0.025em 0 rgba(0, 255, 0, 0.75),
                -0.025em -0.05em 0 rgba(0, 0, 255, 0.75);
  }
`;

const skew = keyframes`
  0% {
    transform: skew(0deg);
  }
  5% {
    transform: skew(5deg);
  }
  10% {
    transform: skew(-5deg);
  }
  15% {
    transform: skew(0deg);
  }
  100% {
    transform: skew(0deg);
  }
`;

const GlitchWrapper = styled.div`
  position: relative;
  font-size: 4em;
  font-weight: bold;
  text-transform: uppercase;
  color: ${props => props.theme.primary};
  letter-spacing: 0.1em;
  animation: ${skew} 2s infinite;
  transform: skew(0deg);
  
  &::before,
  &::after {
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    animation: ${glitch} 2s infinite;
  }

  &::before {
    left: 2px;
    text-shadow: -2px 0 ${props => props.theme.secondary};
    clip: rect(24px, 550px, 90px, 0);
  }

  &::after {
    left: -2px;
    text-shadow: -2px 0 ${props => props.theme.primary};
    clip: rect(85px, 550px, 140px, 0);
    animation-delay: 1s;
  }
`;

const GlitchText = ({ text }) => {
  return (
    <GlitchWrapper data-text={text}>
      {text}
    </GlitchWrapper>
  );
};

export default GlitchText;.song-list {
  list-style-type: none;
  padding: 0;
}

.song-item {
  display: flex;
  align-items: center;
  background-color: rgba(57, 255, 20, 0.1);
  margin-bottom: 15px;
  padding: 15px;
  border-radius: 10px;
  transition: all 0.3s ease;
  border: 1px solid #39FF14;
}

.song-item:hover {
  transform: translateY(-5px);
  box-shadow: 0 5px 15px rgba(57, 255, 20, 0.3);
}

.song-image-container {
  width: 60px;
  height: 60px;
  margin-right: 15px;
  overflow: hidden;
  border-radius: 5px;
}

.album-cover {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.song-info {
  flex-grow: 1;
}

.song-name {
  margin: 0;
  color: #39FF14;
  font-size: 1.2em;
}

.song-artist {
  margin: 5px 0;
  color: #00FFFF;
}

.song-album {
  margin: 0;
  color: #FFFFFF;
  font-size: 0.9em;
}

.song-actions {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.play-button, .open-spotify-button, .suggest-song-button {
  background-color: #39FF14;
  color: #000000;
  border: none;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.3s ease;
  font-size: 1.2em;
  margin: 5px 0;
}

.open-spotify-button, .suggest-song-button {
  width: auto;
  height: auto;
  border-radius: 20px;
  padding: 5px 10px;
  font-size: 0.8em;
}

.suggest-song-button {
  background-color: #FF1493;
  color: #FFFFFF;
}

.play-button:hover:not(.disabled), 
.open-spotify-button:hover, 
.suggest-song-button:hover {
  background-color: #00FFFF;
  box-shadow: 0 0 15px #00FFFF;
}

.suggest-song-button:hover {
  background-color: #FF69B4;
  box-shadow: 0 0 15px #FF69B4;
}

.play-button.disabled {
  background-color: #666;
  cursor: not-allowed;
  opacity: 0.5;
}

.no-songs-message {
  color: #00FFFF;
  text-align: center;
  font-size: 1.2em;
  margin-top: 20px;
}import React, { useState, useEffect } from 'react';
import { updateRequestStatus, getRequestQueue } from '../services/SongRequestService';
import { addToVotingQueue } from '../services/VotingService';
import './DjInterface.css';

const DjInterface = ({ currentSong, onPlaySong, setRequestQueue }) => {
  const [error, setError] = useState(null);
  const [localRequestQueue, setLocalRequestQueue] = useState([]);

  useEffect(() => {
    const fetchQueue = async () => {
      const queue = await getRequestQueue();
      setLocalRequestQueue(queue);
      setRequestQueue(queue);
    };
    fetchQueue();
    const interval = setInterval(fetchQueue, 10000);
    return () => clearInterval(interval);
  }, [setRequestQueue]);

  const handleAcceptRequest = async (request) => {
    try {
      await updateRequestStatus(request.id, 'accepted');
      await addToVotingQueue(request);
      setLocalRequestQueue(prevQueue => prevQueue.filter(req => req.id !== request.id));
      setRequestQueue(prevQueue => prevQueue.filter(req => req.id !== request.id));
      setError(null);
    } catch (err) {
      console.error('Error accepting request:', err);
      setError(`Error al aceptar la solicitud: ${err.message}`);
    }
  };

  const handleRejectRequest = async (requestId) => {
    try {
      await updateRequestStatus(requestId, 'rejected');
      setLocalRequestQueue(prevQueue => prevQueue.filter(req => req.id !== requestId));
      setRequestQueue(prevQueue => prevQueue.filter(req => req.id !== requestId));
      setError(null);
    } catch (err) {
      console.error('Error rejecting request:', err);
      setError(`Error al rechazar la solicitud: ${err.message}`);
    }
  };

  if (error) {
    return <div className="error-message">{error}</div>;
  }

  return (
    <div className="dj-interface">
      <h2>Interfaz del DJ</h2>
      <div className="current-song">
        <h3>Reproduciendo ahora:</h3>
        {currentSong ? (
          <div className="current-song-info">
            <img src={currentSong.album_image} alt={currentSong.album} className="song-image" />
            <div>
              <p className="song-title">{currentSong.name}</p>
              <p className="song-artist">{currentSong.artists}</p>
            </div>
          </div>
        ) : (
          <p>No hay canción en reproducción</p>
        )}
      </div>
      <div className="request-queue">
        <h3>Cola de solicitudes:</h3>
        {localRequestQueue.length === 0 ? (
          <p>No hay solicitudes pendientes</p>
        ) : (
          <ul className="request-list">
            {localRequestQueue.map(request => (
              <li key={request.id} className="request-item">
                <img src={request.album_image} alt={request.album} className="request-image" />
                <div className="request-info">
                  <p className="request-title">{request.songTitle}</p>
                  <p className="request-artist">{request.artistName}</p>
                  <p className="request-album">{request.album}</p>
                </div>
                <div className="request-actions">
                  <button onClick={() => handleAcceptRequest(request)} className="accept-button">Aceptar</button>
                  <button onClick={() => handleRejectRequest(request.id)} className="reject-button">Rechazar</button>
                </div>
              </li>
            ))}
          </ul>
        )}
      </div>
    </div>
  );
};

export default DjInterface;

import React, { useState, useEffect, useCallback } from 'react';
import { getVotingQueue, submitVote } from '../services/VotingService';
import './SuggestionQueue.css';

const SuggestionQueue = ({ userId }) => {
  const [suggestions, setSuggestions] = useState([]);

  const fetchSuggestions = useCallback(async () => {
    const votingQueue = await getVotingQueue();
    setSuggestions(votingQueue.sort((a, b) => b.votes - a.votes));
  }, []);

  useEffect(() => {
    fetchSuggestions();
    const interval = setInterval(fetchSuggestions, 10000);
    return () => clearInterval(interval);
  }, [fetchSuggestions]);

  const handleVote = useCallback(async (songId, voteType) => {
    try {
      const { updatedSong } = await submitVote(userId, songId, voteType);
      setSuggestions(prevSuggestions => {
        const newSuggestions = prevSuggestions.map(song => 
          song.id === songId ? { ...song, ...updatedSong } : song
        );
        return newSuggestions.sort((a, b) => b.votes - a.votes);
      });
    } catch (error) {
      console.error('Error al votar:', error);
      // Aquí puedes mostrar un mensaje de error al usuario
    }
  }, [userId]);

  const renderTrendIndicator = useCallback((trend) => {
    if (trend > 0) return <span className="trend-up">↑</span>;
    if (trend < 0) return <span className="trend-down">↓</span>;
    return <span className="trend-neutral">−</span>;
  }, []);

  return (
    <div className="suggestion-queue">
      <h2>Cola de Sugerencias</h2>
      {suggestions.length === 0 ? (
        <p>No hay sugerencias en la cola</p>
      ) : (
        <ul>
          {suggestions.map((song, index) => (
            <li key={song.id} className="suggestion-item">
              <span className="queue-position">{index + 1}</span>
              <div className="song-info">
                <span className="song-title">{song.songTitle}</span>
                <span className="song-artist">{song.artistName}</span>
              </div>
              <div className="vote-count">
                {renderTrendIndicator(song.trend)}
                {song.votes}
              </div>
              <div className="vote-buttons">
                <button 
                  onClick={() => handleVote(song.id, 'upvote')}
                  disabled={song.userVoted && song.userVoted[userId]}
                  className={song.userVoted && song.userVoted[userId] ? 'voted' : ''}
                  aria-label="Votar positivamente"
                >
                  👍
                </button>
                <button 
                  onClick={() => handleVote(song.id, 'downvote')}
                  disabled={song.userVoted && song.userVoted[userId]}
                  className={song.userVoted && song.userVoted[userId] ? 'voted' : ''}
                  aria-label="Votar negativamente"
                >
                  👎
                </button>
              </div>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
};

export default SuggestionQueue;import React, { useState } from 'react';

const SongRequestForm = ({ onSubmit }) => {
  const [songTitle, setSongTitle] = useState('');
  const [artistName, setArtistName] = useState('');
  const [message, setMessage] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit({ songTitle, artistName, message });
    // Limpiar el formulario después del envío
    setSongTitle('');
    setArtistName('');
    setMessage('');
  };

  return (
    <form onSubmit={handleSubmit} className="song-request-form">
      <input
        type="text"
        value={songTitle}
        onChange={(e) => setSongTitle(e.target.value)}
        placeholder="Título de la canción"
        required
      />
      <input
        type="text"
        value={artistName}
        onChange={(e) => setArtistName(e.target.value)}
        placeholder="Nombre del artista"
        required
      />
      <textarea
        value={message}
        onChange={(e) => setMessage(e.target.value)}
        placeholder="Mensaje para el DJ (opcional)"
      />
      <button type="submit">Solicitar Canción</button>
    </form>
  );
};

export default SongRequestForm;import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { ChevronLeft, ChevronRight, Sun, Moon } from 'lucide-react';
import { themes } from './themes'; // Asegúrate de que la ruta sea correcta

const ThemeCarousel = React.memo(({ currentTheme, setCurrentTheme, isDynamicThemeEnabled, setIsDynamicThemeEnabled }) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const themeKeys = useMemo(() => Object.keys(themes), []);

  const nextTheme = useCallback(() => {
    setCurrentIndex((prevIndex) => 
      prevIndex === themeKeys.length - 1 ? 0 : prevIndex + 1
    );
  }, [themeKeys]);

  const prevTheme = useCallback(() => {
    setCurrentIndex((prevIndex) => 
      prevIndex === 0 ? themeKeys.length - 1 : prevIndex - 1
    );
  }, [themeKeys]);

  const toggleDarkMode = useCallback(() => {
    setCurrentTheme(prevTheme => ({
      ...prevTheme,
      mode: prevTheme.mode === 'light' ? 'dark' : 'light'
    }));
  }, [setCurrentTheme]);

  useEffect(() => {
    const newThemeName = themeKeys[currentIndex];
    if (newThemeName && themes[newThemeName]) {
      const newThemeData = themes[newThemeName][currentTheme.mode || 'light'];
      setCurrentTheme(prevTheme => ({
        name: newThemeName,
        mode: prevTheme.mode || 'light',
        ...newThemeData
      }));

      // Aplicar estilos de fondo directamente al body
      document.body.style.backgroundColor = newThemeData.background;
      document.body.style.backgroundImage = newThemeData.pattern || 'none';
    }
  }, [currentIndex, setCurrentTheme, themeKeys, currentTheme.mode]);

  const currentThemeData = useMemo(() => {
    return currentTheme && themes[currentTheme.name] && themes[currentTheme.name][currentTheme.mode]
      ? themes[currentTheme.name][currentTheme.mode]
      : themes.pop.light;
  }, [currentTheme]);

  const animationStyle = useMemo(() => {
    if (currentThemeData.animation && currentThemeData.animation.name) {
      return { animation: `${currentThemeData.animation.name} 2s infinite` };
    }
    return {};
  }, [currentThemeData]);

  useEffect(() => {
    if (currentThemeData.animation && currentThemeData.animation.name) {
      const style = document.createElement('style');
      style.textContent = `
        @keyframes ${currentThemeData.animation.name} {
          ${currentThemeData.animation.keyframes}
        }
      `;
      document.head.appendChild(style);
      return () => {
        document.head.removeChild(style);
      };
    }
  }, [currentThemeData]);

  const darkModeButtonStyle = {
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    color: '#ffffff',
    border: '2px solid #ffffff',
    borderRadius: '50%',
    width: '40px',
    height: '40px',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    cursor: 'pointer',
    transition: 'all 0.3s ease',
    marginLeft: '10px', // Añadido para dar espacio entre el carrusel y el botón
  };

  if (process.env.NODE_ENV !== 'production') {
    console.log('Current theme:', currentTheme);
    console.log('Available themes:', themeKeys);
    console.log('Current theme data:', currentThemeData);
  }

  return (
    <div className="theme-carousel" style={{ 
      fontFamily: currentThemeData.font,
      color: currentThemeData.text,
      display: 'flex',
      alignItems: 'center',
    }}>
      <div>
        <button 
          onClick={() => setIsDynamicThemeEnabled(!isDynamicThemeEnabled)}
          className="dynamic-theme-toggle"
          style={{
            background: currentThemeData.buttonGradient,
            color: currentThemeData.text,
            boxShadow: currentThemeData.boxShadow
          }}
        >
          {isDynamicThemeEnabled ? 'Desactivar' : 'Activar'} Tema Dinámico
        </button>
        <div className="carousel-container" style={{ background: currentThemeData.background }}>
          <button className="carousel-button prev" onClick={prevTheme}>
            <ChevronLeft color={currentThemeData.text} />
          </button>
          <AnimatePresence mode="wait">
            <motion.div
              key={currentIndex}
              className="theme-item"
              initial={{ opacity: 0, y: 50 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -50 }}
              transition={{ duration: 0.3 }}
              style={animationStyle}
            >
              <div className="theme-preview" style={{ 
                backgroundColor: currentThemeData.background,
                color: currentThemeData.text,
                backgroundImage: currentThemeData.pattern
              }}>
                <span className="theme-name">{currentTheme.name}</span>
                <div className="color-preview primary" style={{ backgroundColor: currentThemeData.primary }}></div>
                <div className="color-preview secondary" style={{ backgroundColor: currentThemeData.secondary }}></div>
              </div>
            </motion.div>
          </AnimatePresence>
          <button className="carousel-button next" onClick={nextTheme}>
            <ChevronRight color={currentThemeData.text} />
          </button>
        </div>
      </div>
      <button 
        onClick={toggleDarkMode} 
        style={darkModeButtonStyle}
        onMouseEnter={(e) => e.currentTarget.style.transform = 'scale(1.1)'}
        onMouseLeave={(e) => e.currentTarget.style.transform = 'scale(1)'}
      >
        {currentTheme.mode === 'dark' ? <Sun color="#ffffff" size={24} /> : <Moon color="#ffffff" size={24} />}
      </button>
    </div>
  );
});

export default ThemeCarousel;import React, { useState, useEffect } from 'react';
import { getVotingQueue, submitVote } from '../services/VotingService';

const VotingScreen = ({ userId }) => {
  const [votingQueue, setVotingQueue] = useState([]);

  useEffect(() => {
    const fetchVotingQueue = async () => {
      const queue = await getVotingQueue();
      setVotingQueue(queue);
    };

    fetchVotingQueue();
    const interval = setInterval(fetchVotingQueue, 10000);

    return () => clearInterval(interval);
  }, []);

  const handleVote = async (songId, voteType) => {
    try {
      const { updatedSong } = await submitVote(userId, songId, voteType);
      setVotingQueue(prevQueue => {
        const newQueue = prevQueue.map(song => 
          song.id === songId ? updatedSong : song
        );
        return newQueue.sort((a, b) => b.votes - a.votes);
      });
    } catch (error) {
      console.error('Error al votar:', error);
      // Aquí puedes mostrar un mensaje de error al usuario
    }
  };

  const renderTrendIndicator = (trend) => {
    if (trend > 0) return <span className="trend-up">↑</span>;
    if (trend < 0) return <span className="trend-down">↓</span>;
    return <span className="trend-neutral">−</span>;
  };

  return (
    <div className="voting-screen">
      <h2>Vota por las canciones</h2>
      <ul className="voting-queue">
        {votingQueue.map((song) => (
          <li key={song.id} className="voting-item">
            <div className="song-info">
              <span className="song-title">{song.title}</span>
              <span className="song-artist">{song.artist}</span>
            </div>
            <div className="vote-count">
              {renderTrendIndicator(song.trend)}
              {song.votes}
            </div>
            <div className="vote-buttons">
              <button 
                onClick={() => handleVote(song.id, 'upvote')}
                disabled={song.userVoted}
                className={song.userVoted ? 'voted' : ''}
              >
                👍
              </button>
              <button 
                onClick={() => handleVote(song.id, 'downvote')}
                disabled={song.userVoted}
                className={song.userVoted ? 'voted' : ''}
              >
                👎
              </button>
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default VotingScreen;import React, { useState, useEffect } from "react";
import { Volume2, VolumeX, Minus, Plus } from "lucide-react";

const VolumeControl = ({ primaryColor, secondaryColor, accentColor }) => {
    const [volume, setVolume] = useState(1);
    const [isMuted, setIsMuted] = useState(false);
    const [isHovered, setIsHovered] = useState(false);

    useEffect(() => {
        document.querySelectorAll("audio").forEach(audio => {
            audio.volume = isMuted ? 0 : volume;
        });
    }, [volume, isMuted]);

    const handleVolumeChange = (e) => {
        const newVolume = parseFloat(e.target.value);
        setVolume(newVolume);
        setIsMuted(false);
    };

    const handleMuteToggle = () => {
        setIsMuted(!isMuted);
    };

    const incrementVolume = () => {
        setVolume(prev => Math.min(1, prev + 0.1));
        setIsMuted(false);
    };

    const decrementVolume = () => {
        setVolume(prev => Math.max(0, prev - 0.1));
        setIsMuted(false);
    };

    return (
        <div 
            className={`volume-control-wrapper ${isHovered ? 'hovered' : ''}`}
            onMouseEnter={() => setIsHovered(true)}
            onMouseLeave={() => setIsHovered(false)}
            style={{
                '--primary-color': primaryColor,
                '--secondary-color': secondaryColor,
                '--accent-color': accentColor
            }}
        >
            <button 
                onClick={handleMuteToggle}
                className="mute-button"
                aria-label={isMuted ? "Unmute" : "Mute"}
            >
                {isMuted ? <VolumeX size={24} /> : <Volume2 size={24} />}
            </button>
            <button onClick={decrementVolume} className="volume-adjust-button">
                <Minus size={16} />
            </button>
            <div className="slider-container">
                <input 
                    type="range"
                    min="0"
                    max="1"
                    step="0.01"
                    value={isMuted ? 0 : volume}
                    onChange={handleVolumeChange}
                    className="volume-slider"
                    aria-label="Volume"
                />
                <div 
                    className="volume-level" 
                    style={{width: `${(isMuted ? 0 : volume) * 100}%`}}
                />
            </div>
            <button onClick={incrementVolume} className="volume-adjust-button">
                <Plus size={16} />
            </button>
            <div className="volume-visualization">
                {[...Array(5)].map((_, index) => (
                    <div 
                        key={index} 
                        className="volume-bar"
                        style={{
                            height: `${Math.min(100, (volume * 100 * (index + 1) / 5))}%`,
                            opacity: isMuted ? 0.2 : 1
                        }}
                    />
                ))}
            </div>
        </div>
    );
};

export default VolumeControl;.search-input {
  flex-grow: 1;
  padding: 10px;
  font-size: 16px;
  background-color: var(--background);
  border: 2px solid var(--primary);
  border-radius: 25px 0 0 25px;
  color: var(--secondary);
  transition: all 0.3s ease;
}

.search-input:focus {
  outline: none;
  box-shadow: 0 0 10px var(--secondary);
}

.search-button {
  padding: 10px 20px;
  background-color: var(--primary);
  border: none;
  border-radius: 0 25px 25px 0;
  color: var(--background);
  font-size: 16px;
  cursor: pointer;
  transition: all 0.3s ease;
}

.search-button:hover {
  background-color: var(--secondary);
  box-shadow: 0 0 15px var(--secondary);
}

/* Asegúrate de que el contenedor del SearchBar también use los colores del tema */
.search-container {
  display: flex;
  margin-bottom: 20px;
  background-color: var(--background);
  border-radius: 25px;
  overflow: hidden;
  box-shadow: 0 0 10px rgba(var(--primary-rgb), 0.3);
}

/* Estilo adicional para mejorar la legibilidad del texto de búsqueda */
.search-input::placeholder {
  color: var(--text);
  opacity: 0.7;
}

/* Efecto de brillo al enfocar toda la barra de búsqueda */
.search-container:focus-within {
  box-shadow: 0 0 15px var(--primary);
}import React, { useState } from 'react';
import { motion } from 'framer-motion';

function Login({ onLoginSuccess, onBackToApp }) {
  const [formData, setFormData] = useState({
    email: '',
    contraseña: ''
  });
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevState => ({
      ...prevState,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setIsLoading(true);
    try {
      const response = await fetch('/api/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      if (response.ok) {
        const data = await response.json();
        console.log('Inicio de sesión exitoso:', data);
        onLoginSuccess(data);
      } else {
        const errorData = await response.json();
        setError(errorData.message || 'Error en el inicio de sesión. Por favor, intente de nuevo.');
      }
    } catch (error) {
      console.error('Error al enviar la solicitud:', error);
      setError('Error de conexión. Por favor, intente de nuevo más tarde.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      transition={{ duration: 0.5 }}
      className="auth-container"
    >
      <button onClick={onBackToApp} className="back-to-app-btn">Volver</button>
      <div className="auth-form">
        <div className="auth-content">
          <h2>Iniciar Sesión</h2>
          <form onSubmit={handleSubmit}>
            <div className="input-group">
              <input
                type="email"
                name="email"
                value={formData.email}
                onChange={handleChange}
                required
              />
              <label>Email</label>
            </div>
            <div className="input-group">
              <input
                type="password"
                name="contraseña"
                value={formData.contraseña}
                onChange={handleChange}
                required
              />
              <label>Contraseña</label>
            </div>
            {error && <p className="error-message">{error}</p>}
            <button type="submit" disabled={isLoading}>
              {isLoading ? 'Iniciando sesión...' : 'Iniciar Sesión'}
            </button>
          </form>
        </div>
      </div>
    </motion.div>
  );
}

export default Login;.dj-interface {
    background-color: rgba(0, 0, 0, 0.8);
    border: 2px solid #39FF14;
    border-radius: 15px;
    padding: 25px;
    margin-bottom: 30px;
    color: #FFFFFF;
  }
  
  .dj-interface h2, .dj-interface h3 {
    color: #39FF14;
    text-align: center;
    margin-bottom: 25px;
    text-shadow: 0 0 10px #39FF14;
  }
  
  .current-song {
    background-color: rgba(57, 255, 20, 0.1);
    padding: 20px;
    border-radius: 10px;
    margin-bottom: 25px;
    border: 1px solid #39FF14;
  }
  
  .current-song-info {
    display: flex;
    align-items: center;
  }
  
  .song-image {
    width: 80px;
    height: 80px;
    object-fit: cover;
    margin-right: 20px;
    border-radius: 10px;
    border: 2px solid #39FF14;
  }
  
  .song-title {
    color: #39FF14;
    font-size: 1.4em;
    margin: 0;
    text-shadow: 0 0 5px #39FF14;
  }
  
  .song-artist {
    color: #00FFFF;
    font-size: 1.1em;
    margin: 5px 0;
  }
  
  .request-queue {
    margin-top: 25px;
  }
  
  .request-list {
    list-style-type: none;
    padding: 0;
  }
  
  .request-item {
    background-color: rgba(0, 255, 255, 0.1);
    margin-bottom: 15px;
    padding: 20px;
    border-radius: 10px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    transition: all 0.3s ease;
    border: 1px solid #00FFFF;
  }
  
  .request-item:hover {
    background-color: rgba(0, 255, 255, 0.2);
    transform: translateY(-3px);
    box-shadow: 0 5px 15px rgba(0, 255, 255, 0.3);
  }
  
  .request-image {
    width: 60px;
    height: 60px;
    object-fit: cover;
    border-radius: 50%;
    margin-right: 20px;
    border: 2px solid #00FFFF;
  }
  
  .request-info {
    flex-grow: 1;
  }
  
  .request-title {
    color: #39FF14;
    font-weight: bold;
    margin: 0;
    font-size: 1.2em;
  }
  
  .request-artist {
    color: #00FFFF;
    margin: 5px 0;
  }
  
  .request-album {
    color: #FFFFFF;
    font-size: 0.9em;
    margin: 0;
  }
  
  .request-actions {
    display: flex;
    flex-wrap: wrap;
    justify-content: flex-end;
    align-items: center;
  }
  
  .request-actions button {
    background-color: #39FF14;
    color: #000000;
    border: none;
    padding: 12px 24px;
    border-radius: 30px;
    cursor: pointer;
    margin: 5px;
    transition: all 0.3s ease;
    font-weight: bold;
    text-transform: uppercase;
    letter-spacing: 2px;
    box-shadow: 0 0 15px #39FF14;
    font-size: 1em;
  }
  
  .request-actions button:hover {
    transform: translateY(-3px);
    box-shadow: 0 5px 20px #39FF14;
  }
  
  .accept-button {
    background-color: #39FF14;
  }
  
  .reject-button {
    background-color: #FF4136;
    color: #FFFFFF;
  }
  
  .play-button {
    background-color: #0074D9;
    color: #FFFFFF;
    width: 60px;
    height: 60px;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 24px;
    padding: 0;
    transition: all 0.3s ease;
  }
  
  .play-button:hover {
    background-color: #0063B8;
    transform: scale(1.1);
  }
  
  .play-button svg {
    width: 24px;
    height: 24px;
  }
  .accept-button:hover {
    background-color: #2EBD0F;
  }
  
  .reject-button:hover {
    background-color: #E03023;
  }
  
  
  @media (max-width: 768px) {
    .request-item {
      flex-direction: column;
      align-items: center;
      text-align: center;
    }
  
    .request-image {
      margin-right: 0;
      margin-bottom: 15px;
    }
  
    .request-actions {
      flex-direction: row;
      justify-content: center;
      width: 100%;
      margin-top: 15px;
    }
  
    .request-actions button {
      flex: 1;
      margin: 5px;
      padding: 10px 15px;
      font-size: 0.9em;
    }
}.suggestion-queue {
    background-color: rgba(0, 0, 0, 0.8);
    border: 2px solid #39FF14;
    border-radius: 10px;
    padding: 20px;
    margin-top: 20px;
  }
  
  .suggestion-queue h2 {
    color: #39FF14;
    text-align: center;
    margin-bottom: 20px;
  }
  
  .suggestion-queue ul {
    list-style-type: none;
    padding: 0;
  }
  
  .suggestion-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: rgba(57, 255, 20, 0.1);
    margin-bottom: 10px;
    padding: 10px;
    border-radius: 5px;
    transition: all 0.3s ease;
  }
  
  .suggestion-item:hover {
    background-color: rgba(57, 255, 20, 0.2);
  }
  
  .queue-position {
    color: #00FFFF;
    font-weight: bold;
    margin-right: 10px;
  }
  
  .song-info {
    flex-grow: 1;
  }
  
  .song-title {
    color: #39FF14;
    font-weight: bold;
    margin-right: 10px;
  }
  
  .song-artist {
    color: #00FFFF;
  }
  
  .vote-count {
    color: #FFFF00;
    font-weight: bold;
    margin: 0 20px;
  }
  
  .trend-up {
    color: #39FF14;
  }
  
  .trend-down {
    color: #FF6600;
  }
  
  .trend-neutral {
    color: #FFFF00;
  }
  
  .vote-buttons button {
    background-color: transparent;
    border: none;
    font-size: 1.5em;
    cursor: pointer;
    padding: 5px;
    transition: all 0.3s ease;
  }
  
  .vote-buttons button:hover {
    transform: scale(1.2);
  }
  
  .vote-buttons button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  
  .vote-buttons button.voted {
    color: #39FF14;
  }import { useEffect } from 'react';
import { usePalette } from 'color-thief-react';

const DynamicTheme = ({ albumCover, isEnabled }) => {
  const { data: palette, loading, error } = usePalette(albumCover, 5, 'hex', { 
    crossOrigin: 'anonymous', 
    quality: 10 
  });

  useEffect(() => {
    if (isEnabled && palette) {
      document.documentElement.style.setProperty('--primary', palette[0]);
      document.documentElement.style.setProperty('--secondary', palette[1]);
      document.documentElement.style.setProperty('--background', palette[4]);
      document.documentElement.style.setProperty('--text', palette[2]);
    }
  }, [isEnabled, palette]);

  if (loading || error) return null;

  return null; // Este componente no renderiza nada visible
};

export default DynamicTheme;import React, { useState } from 'react';
import { themes } from './themes';

const ThemeSelector = ({ currentTheme, setCurrentTheme, isDynamicThemeEnabled, setIsDynamicThemeEnabled }) => {
  const [showAllThemes, setShowAllThemes] = useState(false);

  const handleThemeChange = (theme) => {
    setCurrentTheme(theme);
  };

  return (
    <div className="theme-selector">
      <button 
        onClick={() => setIsDynamicThemeEnabled(!isDynamicThemeEnabled)}
        className="dynamic-theme-toggle"
      >
        {isDynamicThemeEnabled ? 'Desactivar' : 'Activar'} Tema Dinámico
      </button>
      <button 
        onClick={() => setShowAllThemes(!showAllThemes)} 
        className="show-all-themes-button"
      >
        {showAllThemes ? 'OCULTAR TEMAS' : 'TEMAS MUSICALES'}
      </button>
      <div className="theme-buttons-container">
        {(showAllThemes ? Object.keys(themes) : Object.keys(themes).slice(0, 5)).map(theme => (
          <button 
            key={theme} 
            onClick={() => handleThemeChange(theme)} 
            className={`theme-button ${currentTheme === theme ? 'active glow-pulse' : ''}`}
          >
            {theme}
          </button>
        ))}
      </div>
    </div>
  );
};

export default ThemeSelector;
